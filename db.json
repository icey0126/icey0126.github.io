{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/bilibili-fill.svg","path":"images/bilibili-fill.svg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/icon_bilibili-circle.svg","path":"images/icon_bilibili-circle.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/antd-pro使用dva多次请求取指定次返回值.md","hash":"9405038d26b3d93c3a6ec2c54ca20118b782a4a7","modified":1626706153838},{"_id":"source/_posts/function.md","hash":"e0edf92f3b820fd4f0bec9ceaaed68582de1394b","modified":1626510689082},{"_id":"source/_posts/关键词高亮真好玩doge.md","hash":"f7e9b4e94b5b58e4b36ebeeb17750d5ed4cf5b22","modified":1628612672904},{"_id":"source/_posts/可配置抽奖转盘遇到的一些坑和处理方法.md","hash":"e3d9bd94b8a2ca6f90cda8e6868cd529ed0b7864","modified":1627925371472},{"_id":"source/about/index.md","hash":"42e806deddb240d4d0d1f3645163675dccd762ad","modified":1626500827545},{"_id":"source/_data/styles.styl","hash":"14fcfb2e504106e364ba58aa9cd849830f69acd9","modified":1626508650920},{"_id":"source/images/bilibili-fill.svg","hash":"4dbbe9787ef10977a01cd236b3a89399c60f24cb","modified":1626508324265},{"_id":"source/tags/index.md","hash":"41ad2710700f34ca6799bd51ad634f91c9344505","modified":1626510781420},{"_id":"source/categories/index.md","hash":"44ca2fde85a41028419766aa70fd2b3615ab9b66","modified":1626510765646},{"_id":"source/.DS_Store","hash":"b13f2e43ad7f57558ca00f5f8809a9bbb3826da4","modified":1647238103134},{"_id":"source/images/.DS_Store","hash":"6f31e697467f3f987435b9b470ceb54569ca6832","modified":1627035465888},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1624814164720},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1624814164720},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1624814164720},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1624814164724},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1624814164725},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1624814164725},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1624814164725},{"_id":"themes/next/_config.yml","hash":"7d0b5438f7412364260412e7773701b53420a254","modified":1626509615381},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1624814164725},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1624814164726},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1624814164733},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1624814164720},{"_id":"themes/next/package.json","hash":"5da2b53f923c8f33f0b7058faf00aa9f1820cfc7","modified":1628612267715},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1624814164721},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1624814164723},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1624814164723},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1624814164723},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1624814164723},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1624814164723},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1624814164724},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1624814164724},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1624814164724},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1624814164724},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1624814164727},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1624814164728},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1624814164728},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1624814164728},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1624814164728},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1624814164729},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1624814164729},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1624814164729},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1624814164729},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1624814164733},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1624814164734},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1624814164734},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1624814164734},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1624814164734},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1624814164735},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1624814164735},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1624814164735},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1624814164735},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1624814164736},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1624814164736},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1624814164736},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1624814164737},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1624814164737},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1624814164737},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1624814164737},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1624814164738},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1624814164738},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1624814164738},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1624814164738},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1624814164739},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1624814164739},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1624814164740},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1624814164764},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1624814164764},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1624814164764},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1624814164765},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1624814164765},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1624814164765},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1624814164773},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1624814164721},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1624814164721},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1624814164722},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1624814164722},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1624814164730},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1624814164730},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1624814164730},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1624814164730},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1624814164731},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1624814164731},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1624814164731},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1624814164731},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1624814164731},{"_id":"themes/next/source/.DS_Store","hash":"a1a38713d1f376b2ee682ca06ec73db0f5545d3e","modified":1626504797565},{"_id":"themes/next/.DS_Store","hash":"98745988fad5cdacc9347598d7e74ddf55904b79","modified":1626504797562},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1624814164732},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1624814164732},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1624814164732},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1624814164733},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1624814164740},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1628609650962},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1624814164741},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1624814164741},{"_id":"themes/next/layout/_partials/footer.swig","hash":"f0994551be859ce10838612a68413389092c7b5e","modified":1626501240110},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1624814164746},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1624814164745},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1624814164749},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1624814164749},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1624814164750},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1624814164753},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1624814164750},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1624814164753},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1624814164754},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1624814164758},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1624814164759},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1624814164760},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1624814164766},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1624814164770},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1624814164771},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1624814164771},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1624814164771},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1624814164772},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1624814164772},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1624814164772},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1624814164773},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1624814164773},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1624814164774},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1624814164774},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1624814164774},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1624814164774},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1624814164775},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1624814164775},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1624814164775},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1624814164776},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1624814164776},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1624814164776},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1624814164777},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1624814164801},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1624814164814},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1624814164819},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1624814164819},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1624814164820},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1624814164820},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1624814164820},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1624814164821},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1624814164815},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1624814164815},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1624814164815},{"_id":"themes/next/source/images/avatar.jpeg","hash":"4969f462791a47561a1e3100588d1c1a3e831a15","modified":1629030303928},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1624814164816},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1624814164816},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1624814164816},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1624814164817},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1624814164817},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1624814164817},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1624814164818},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1624814164818},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1624814164818},{"_id":"themes/next/source/images/icon_bilibili-circle.svg","hash":"e62ed99379b6ba65ce627e03ca1f92e9b1831ecc","modified":1626504751399},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1624814164818},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1624814164822},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1624814164742},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1624814164742},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1624814164743},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1624814164744},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1624814164744},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1624814164743},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1624814164745},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1624814164745},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1624814164745},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1624814164746},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1624814164746},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1624814164747},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1624814164747},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1624814164747},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1624814164748},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1624814164748},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1624814164748},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1624814164749},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1624814164750},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1624814164751},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1624814164751},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1624814164752},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1624814164752},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1624814164755},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1624814164755},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1624814164754},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1624814164753},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1624814164754},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1624814164754},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1624814164756},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1624814164756},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1624814164756},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1624814164757},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1624814164757},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1624814164757},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1624814164758},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1624814164758},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1624814164758},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1624814164761},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1624814164761},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1624814164761},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1624814164762},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1624814164762},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"787fa62b26ae31eabdebb3abd2ce3d18b0c92c46","modified":1626706278646},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1624814164762},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1624814164763},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1624814164763},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1624814164763},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1624814164767},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1624814164767},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1624814164767},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1624814164768},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1624814164768},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1624814164768},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1624814164769},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1624814164769},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1624814164769},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1624814164770},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1624814164770},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1624814164810},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1624814164810},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1624814164810},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1624814164813},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1624814164814},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1624814164821},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1624814164821},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1624814164827},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1624814164827},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1624814164777},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1624814164778},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1624814164778},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1624814164785},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1624814164790},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1624814164791},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1624814164794},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1624814164795},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1624814164798},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1624814164795},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1624814164798},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1624814164798},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1624814164798},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1624814164801},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1624814164802},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1624814164802},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1624814164803},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1624814164803},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1624814164803},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1624814164804},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1624814164804},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1624814164804},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1624814164805},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1624814164805},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1624814164805},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1624814164805},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1624814164806},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1624814164806},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1624814164808},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1624814164809},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1624814164809},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1624814164809},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1624814164823},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1624814164825},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1624814164778},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1624814164779},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1624814164779},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1624814164779},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1624814164780},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1624814164780},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1624814164780},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1624814164780},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1624814164781},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1624814164781},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1624814164781},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1624814164782},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1624814164782},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1624814164783},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1624814164783},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1624814164784},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1624814164784},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1624814164785},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1624814164786},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1624814164786},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1624814164786},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1624814164786},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1624814164787},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1624814164787},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1624814164788},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1624814164788},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1624814164788},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1624814164788},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1624814164789},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1624814164789},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1624814164791},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1624814164789},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1624814164791},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1624814164792},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1624814164792},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1624814164792},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1624814164792},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1624814164793},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1624814164793},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1624814164794},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1624814164794},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1624814164796},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1624814164797},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1624814164797},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1624814164797},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1624814164799},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1624814164799},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1624814164799},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1624814164800},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1624814164800},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1624814164800},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1624814164801},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1624814164824},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1624814164826},{"_id":"public/tags/index.html","hash":"20ed0c63205a244295d09b213eb6b5d23bcf354e","modified":1648218772508},{"_id":"public/categories/index.html","hash":"3712d1b748d667b3df6b5e09061eadbfab9c8b6d","modified":1648218772508},{"_id":"public/about/index.html","hash":"838d9b4b7d82e254cbc2362dfa2cf5c700bb9995","modified":1648218772508},{"_id":"public/2021/08/10/关键词高亮真好玩doge/index.html","hash":"d13de225705aa31238c1ad849e9a0844dbfa65b6","modified":1648218772508},{"_id":"public/archives/index.html","hash":"3c51ac863eae79489435b7498bc4e94be699e899","modified":1648218772508},{"_id":"public/archives/2021/index.html","hash":"f688c0b81663e550d8df061855af2f730b88c4a0","modified":1648218772508},{"_id":"public/archives/2021/05/index.html","hash":"80e2ee810e05b201fd02b6278a5d488ab3ab2b17","modified":1648218772508},{"_id":"public/archives/2021/07/index.html","hash":"5c6787394dc9adee50ff45220fa44d667511199d","modified":1648218772508},{"_id":"public/archives/2021/08/index.html","hash":"80379c2e217aa898093431658f57c2a56ece830d","modified":1648218772508},{"_id":"public/tags/dva/index.html","hash":"89fcc191a2f3267c68e3f3d56ca7fdd1c1887a87","modified":1648218772508},{"_id":"public/tags/踩坑/index.html","hash":"290724e037f79f233105de0190656a16d0e430ce","modified":1648218772508},{"_id":"public/tags/hexo/index.html","hash":"ec2cbb6974fbf5ca12005cb5648611dad3475fb9","modified":1648218772508},{"_id":"public/tags/生活/index.html","hash":"7657beea2bd39a2a5625023e3c982cbce8120ead","modified":1648218772508},{"_id":"public/tags/兼容性/index.html","hash":"234067585189e1ebeec2c60089a0953e8d953d56","modified":1648218772508},{"_id":"public/tags/状态机/index.html","hash":"8c25ad2cbd4b2a9da2d633688804547acb178220","modified":1648218772508},{"_id":"public/categories/CS/index.html","hash":"358ccb73958fe5c431c625a5945d5aedc1ca02a1","modified":1648218772508},{"_id":"public/categories/日常/index.html","hash":"248d6db59a219def10a5853b1d0650bb4bfdb6c0","modified":1648218772508},{"_id":"public/categories/CS/前端/index.html","hash":"716ad52ef2051bb101761abbf7f3d182461ed3ab","modified":1648218772508},{"_id":"public/2021/08/02/可配置抽奖转盘遇到的一些坑和处理方法/index.html","hash":"6fcd6f95fc6dbb3f9b71974cd1fac7545be982a3","modified":1648218772508},{"_id":"public/2021/07/19/antd-pro使用dva多次请求取指定次返回值/index.html","hash":"53782942b143f4e1b7fad6a6c7c57c9d532d11ab","modified":1648218772508},{"_id":"public/2021/05/16/function/index.html","hash":"e7883f0b3855263aaceff08acdde332fa7e1e1e9","modified":1648218772508},{"_id":"public/index.html","hash":"ec3f64ced49cc3515ddad85be2bc7e43b093845b","modified":1648218772508},{"_id":"public/images/bilibili-fill.svg","hash":"4dbbe9787ef10977a01cd236b3a89399c60f24cb","modified":1628612775846},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1628612775846},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1628612775846},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1628612775846},{"_id":"public/images/avatar.jpeg","hash":"4969f462791a47561a1e3100588d1c1a3e831a15","modified":1629030339906},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1628612775846},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1628612775846},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1628612775846},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1628612775846},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1628612775846},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1628612775846},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1628612775846},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1628612775846},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1628612775846},{"_id":"public/images/icon_bilibili-circle.svg","hash":"e62ed99379b6ba65ce627e03ca1f92e9b1831ecc","modified":1628612775846},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1628612775846},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1628612775846},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1628612775846},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1628612775846},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1628612775846},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1628612775846},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1628612775846},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1628612775846},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1628612775846},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1628612775846},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1628612775846},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1628612775846},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1628612775846},{"_id":"public/css/main.css","hash":"241c7d5a2620291e484b99002626fb189e69d9b8","modified":1628612775846},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1628612775846},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1628612775846},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1628612775846},{"_id":"source/_posts/记录一些git和node命令的好用操作.md","hash":"72d9671164bc4cd1bfbf7893fdeb4aaac8eb79cd","modified":1631201090113},{"_id":"source/_posts/99","hash":"9101fd84c1842222623ca6df0024017dbcc63672","modified":1631200982096},{"_id":"source/_posts/记录一些git的好用操作.md","hash":"2b83ab62af5d1ebe8379242fe4393a1e06e3914d","modified":1637418853931},{"_id":"public/categories/CS/杂/index.html","hash":"d2bb3fe046388d2d2f0bb95c352b593a83505df5","modified":1648218772508},{"_id":"public/archives/2021/09/index.html","hash":"00d4b1b39a26a7de855a48bbe1b429520a79a718","modified":1648218772508},{"_id":"public/tags/git/index.html","hash":"94af909cf5e71388bed813afd33b92b885b3ebbc","modified":1648218772508},{"_id":"public/2021/09/09/记录一些git的好用操作/index.html","hash":"044494547e5c34f68bf10e898c74c0ac2d0e2a04","modified":1648218772508},{"_id":"source/_posts/K8S学习笔记.md","hash":"d2b77d3fd61b238387aea33751a7e191a4ab7435","modified":1648216597631},{"_id":"source/_posts/leetcode真好玩.md","hash":"49b2ab6b0df68c089f06426c2a8210784f0f40af","modified":1637761621247},{"_id":"public/2021/11/24/leetcode真好玩/index.html","hash":"99f6c90cceed3eb0fbbc577f511187ff17a209a4","modified":1648218772508},{"_id":"public/archives/2021/10/index.html","hash":"61b30fda753b8b8aaa10908dced0ba3713374d65","modified":1648218772508},{"_id":"public/archives/2021/11/index.html","hash":"aeba880fcbb373f1f9aad541ab3ae051fa2ec2a7","modified":1648218772508},{"_id":"public/2021/10/26/K8S学习笔记/index.html","hash":"360628428df1044d1ab888f658fad033e30f2093","modified":1648218772508},{"_id":"public/tags/k8s/index.html","hash":"30e9f5fb92124953f189f0b657716e2710cf76ed","modified":1648218772508},{"_id":"source/_posts/隔离真的好无聊.md","hash":"99ed79eb9fafaec4dce83fa2f798a666c7cc2f5d","modified":1646480977068},{"_id":"public/2022/03/05/隔离真的好无聊/index.html","hash":"326a048e932cfb252c843025f6a7b8242e309227","modified":1648218772508},{"_id":"public/archives/2022/03/index.html","hash":"b392e870fab7b8c1a905139ba7bdcc5f6ba0a4c6","modified":1648218772508},{"_id":"public/archives/2022/index.html","hash":"60fd50312a2ca179d5b47c4728353053157ddaa7","modified":1648218772508},{"_id":"source/_posts/记录一个无法构建镜像的坑.md","hash":"7dd1f7db3b6dcd9973aee7327003f43ebe5ee9f2","modified":1648218761822},{"_id":"public/categories/CS/部署/index.html","hash":"3c7a830ee7db6c147174a09b5801322285994dd1","modified":1648218772508},{"_id":"public/tags/docker/index.html","hash":"ff1e02f35b6c7bf9227274d60419bc0845cb1b31","modified":1648218772508},{"_id":"public/2022/03/25/记录一个无法构建镜像的坑/index.html","hash":"564ca2b04bf2b71d06b718e5ff7dee3313e963a4","modified":1648218772508}],"Category":[{"name":"CS","_id":"cks69zwtq00046bt6dk1d142f"},{"name":"日常","_id":"cks69zwtz000b6bt68j3qezp7"},{"name":"前端","parent":"cks69zwtq00046bt6dk1d142f","_id":"cks69zwu1000g6bt691zmah21"},{"name":"杂","parent":"cks69zwtq00046bt6dk1d142f","_id":"cktd2gn240002ljt6hfahg184"},{"name":"部署","parent":"cks69zwtq00046bt6dk1d142f","_id":"cl16iwgjj0001fht65h29ehm7"}],"Data":[{"_id":"styles","data":".fa-bilibili {\n  background: url(\"/images/bilibili-fill.svg\");\n  background-position: 50% 260%;\n  background-repeat: no-repeat;\n  height: 1rem;\n  width: 1rem;\n}\n"}],"Page":[{"title":"标签","date":"2021-07-17T06:02:04.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-07-17 14:02:04\ntype: \"tags\"\n---\n","updated":"2021-07-17T08:33:01.420Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cks69zwtf00006bt69pf31j2z","content":"","site":{"data":{"styles":".fa-bilibili {\n  background: url(\"/images/bilibili-fill.svg\");\n  background-position: 50% 260%;\n  background-repeat: no-repeat;\n  height: 1rem;\n  width: 1rem;\n}\n"}},"excerpt":"","more":""},{"title":"分类","date":"2021-07-17T06:02:23.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-07-17 14:02:23\ntype: \"categories\"\n---\n","updated":"2021-07-17T08:32:45.646Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cks69zwtn00026bt65jtigcng","content":"","site":{"data":{"styles":".fa-bilibili {\n  background: url(\"/images/bilibili-fill.svg\");\n  background-position: 50% 260%;\n  background-repeat: no-repeat;\n  height: 1rem;\n  width: 1rem;\n}\n"}},"excerpt":"","more":""},{"title":"关于我","date":"2021-05-15T18:06:22.000Z","_content":"一个对什么都很感兴趣的死宅，每年唯一的大型活动是参加COMICUP进行扫本，目前在一家小型互联网公司做前端。  \n\n主要兴趣有学语言、网络安全、web、航天、nlp、二刺螈……感觉能写三天三夜。\n\n开始这个blog的目的主要是最近学的太多太杂需要归档整理下，以及记录一些好玩的事情，基本是给自己看的。 ~~但万一能帮到别人呢~~\n\n如果有什么问题可以直接邮件我，github主页有写。\n\n没了。","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2021-05-16 02:06:22\n---\n一个对什么都很感兴趣的死宅，每年唯一的大型活动是参加COMICUP进行扫本，目前在一家小型互联网公司做前端。  \n\n主要兴趣有学语言、网络安全、web、航天、nlp、二刺螈……感觉能写三天三夜。\n\n开始这个blog的目的主要是最近学的太多太杂需要归档整理下，以及记录一些好玩的事情，基本是给自己看的。 ~~但万一能帮到别人呢~~\n\n如果有什么问题可以直接邮件我，github主页有写。\n\n没了。","updated":"2021-07-17T05:47:07.545Z","path":"about/index.html","comments":1,"layout":"page","_id":"cks69zwtt00066bt6akm192u7","content":"<p>一个对什么都很感兴趣的死宅，每年唯一的大型活动是参加COMICUP进行扫本，目前在一家小型互联网公司做前端。  </p>\n<p>主要兴趣有学语言、网络安全、web、航天、nlp、二刺螈……感觉能写三天三夜。</p>\n<p>开始这个blog的目的主要是最近学的太多太杂需要归档整理下，以及记录一些好玩的事情，基本是给自己看的。 <del>但万一能帮到别人呢</del></p>\n<p>如果有什么问题可以直接邮件我，github主页有写。</p>\n<p>没了。</p>\n","site":{"data":{"styles":".fa-bilibili {\n  background: url(\"/images/bilibili-fill.svg\");\n  background-position: 50% 260%;\n  background-repeat: no-repeat;\n  height: 1rem;\n  width: 1rem;\n}\n"}},"excerpt":"","more":"<p>一个对什么都很感兴趣的死宅，每年唯一的大型活动是参加COMICUP进行扫本，目前在一家小型互联网公司做前端。  </p>\n<p>主要兴趣有学语言、网络安全、web、航天、nlp、二刺螈……感觉能写三天三夜。</p>\n<p>开始这个blog的目的主要是最近学的太多太杂需要归档整理下，以及记录一些好玩的事情，基本是给自己看的。 <del>但万一能帮到别人呢</del></p>\n<p>如果有什么问题可以直接邮件我，github主页有写。</p>\n<p>没了。</p>\n"}],"Post":[{"title":"antd pro使用dva多次请求取指定次返回值","date":"2021-07-19T13:55:37.000Z","_content":"\n记录一下上周遇到的问题和解决方法。\n\nantd pro官方推荐了dva进行数据流管理，因为官网有教程就不细说原理了，主要讲一下遇到的问题。\n\n使用dva进行状态管理时出现了一个需求，需要使用同一个接口的不同query参数的返回值作为不同页面的展示数据。\n\n但当某个需要query参数过滤的页面使用useEffect配合dispatch修改数据后，一下子出现了两次请求。当然，这个现象很合理。\n\n一次是没加query参数的请求，一次是加上的。但是我没办法控制页面到底获取的是哪次请求获得的数据，实际上看下来好像拿到的都是第一次没加参数的数据，这当然不是我想要的。\n\n本来有个做法是在获取请求并处理数据的hook这一层做一个判断，当有参数时使用第一种方式取值，没有时使用第二种。但是hook中useEffect的依赖项又出现了dispatch后一定会改变的值，导致了数据无限刷新。所以这个方法不行。\n\n后来在同事的帮助下使用了lodash中的debounce做了一个去抖。\n\n>debounce: 当调用动作n毫秒后，才会执行该动作，若在这n毫秒内又调用此动作则将重新计算执行时间。\n\n实际在请求这个数据时，第一次请求是初始定义的没有参数的请求，第二次则是在使用了dispatch修改了请求参数导致的再请求，因为两次的间隔很短，而我们只需要第二次的请求结果，所以可以直接取消第一次的请求。\n\n大致做法是使用下面这个函数替换掉原来的dispatch部分。\n\n```bash\nconst debouncePatch = debounce(\n    ({params,dispatch}) =>\n        dispatch({type: \"fetchData\", payload: {params}}),\n    200,\n)\n\n//原本的写法\n    dispatch({\n        type: \"fetchData\",\n        payload: {params},\n    })\n\n//替换的写法\n    debouncePatch({\n        dispatch,\n        params,\n    })\n```\n\n\n\n\n\n\n","source":"_posts/antd-pro使用dva多次请求取指定次返回值.md","raw":"---\ntitle: antd pro使用dva多次请求取指定次返回值\ndate: 2021-07-19 21:55:37\ntags: \n- dva\n- 踩坑\ncategories: \n- CS\n- 前端\n---\n\n记录一下上周遇到的问题和解决方法。\n\nantd pro官方推荐了dva进行数据流管理，因为官网有教程就不细说原理了，主要讲一下遇到的问题。\n\n使用dva进行状态管理时出现了一个需求，需要使用同一个接口的不同query参数的返回值作为不同页面的展示数据。\n\n但当某个需要query参数过滤的页面使用useEffect配合dispatch修改数据后，一下子出现了两次请求。当然，这个现象很合理。\n\n一次是没加query参数的请求，一次是加上的。但是我没办法控制页面到底获取的是哪次请求获得的数据，实际上看下来好像拿到的都是第一次没加参数的数据，这当然不是我想要的。\n\n本来有个做法是在获取请求并处理数据的hook这一层做一个判断，当有参数时使用第一种方式取值，没有时使用第二种。但是hook中useEffect的依赖项又出现了dispatch后一定会改变的值，导致了数据无限刷新。所以这个方法不行。\n\n后来在同事的帮助下使用了lodash中的debounce做了一个去抖。\n\n>debounce: 当调用动作n毫秒后，才会执行该动作，若在这n毫秒内又调用此动作则将重新计算执行时间。\n\n实际在请求这个数据时，第一次请求是初始定义的没有参数的请求，第二次则是在使用了dispatch修改了请求参数导致的再请求，因为两次的间隔很短，而我们只需要第二次的请求结果，所以可以直接取消第一次的请求。\n\n大致做法是使用下面这个函数替换掉原来的dispatch部分。\n\n```bash\nconst debouncePatch = debounce(\n    ({params,dispatch}) =>\n        dispatch({type: \"fetchData\", payload: {params}}),\n    200,\n)\n\n//原本的写法\n    dispatch({\n        type: \"fetchData\",\n        payload: {params},\n    })\n\n//替换的写法\n    debouncePatch({\n        dispatch,\n        params,\n    })\n```\n\n\n\n\n\n\n","slug":"antd-pro使用dva多次请求取指定次返回值","published":1,"updated":"2021-07-19T14:49:13.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks69zwtj00016bt6d7ym5lk3","content":"<p>记录一下上周遇到的问题和解决方法。</p>\n<p>antd pro官方推荐了dva进行数据流管理，因为官网有教程就不细说原理了，主要讲一下遇到的问题。</p>\n<p>使用dva进行状态管理时出现了一个需求，需要使用同一个接口的不同query参数的返回值作为不同页面的展示数据。</p>\n<p>但当某个需要query参数过滤的页面使用useEffect配合dispatch修改数据后，一下子出现了两次请求。当然，这个现象很合理。</p>\n<p>一次是没加query参数的请求，一次是加上的。但是我没办法控制页面到底获取的是哪次请求获得的数据，实际上看下来好像拿到的都是第一次没加参数的数据，这当然不是我想要的。</p>\n<p>本来有个做法是在获取请求并处理数据的hook这一层做一个判断，当有参数时使用第一种方式取值，没有时使用第二种。但是hook中useEffect的依赖项又出现了dispatch后一定会改变的值，导致了数据无限刷新。所以这个方法不行。</p>\n<p>后来在同事的帮助下使用了lodash中的debounce做了一个去抖。</p>\n<blockquote>\n<p>debounce: 当调用动作n毫秒后，才会执行该动作，若在这n毫秒内又调用此动作则将重新计算执行时间。</p>\n</blockquote>\n<p>实际在请求这个数据时，第一次请求是初始定义的没有参数的请求，第二次则是在使用了dispatch修改了请求参数导致的再请求，因为两次的间隔很短，而我们只需要第二次的请求结果，所以可以直接取消第一次的请求。</p>\n<p>大致做法是使用下面这个函数替换掉原来的dispatch部分。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const debouncePatch = debounce(</span><br><span class=\"line\">    (&#123;params,dispatch&#125;) =&gt;</span><br><span class=\"line\">        dispatch(&#123;<span class=\"built_in\">type</span>: <span class=\"string\">&quot;fetchData&quot;</span>, payload: &#123;params&#125;&#125;),</span><br><span class=\"line\">    200,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">//原本的写法</span><br><span class=\"line\">    dispatch(&#123;</span><br><span class=\"line\">        <span class=\"built_in\">type</span>: <span class=\"string\">&quot;fetchData&quot;</span>,</span><br><span class=\"line\">        payload: &#123;params&#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//替换的写法</span><br><span class=\"line\">    debouncePatch(&#123;</span><br><span class=\"line\">        dispatch,</span><br><span class=\"line\">        params,</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{"styles":".fa-bilibili {\n  background: url(\"/images/bilibili-fill.svg\");\n  background-position: 50% 260%;\n  background-repeat: no-repeat;\n  height: 1rem;\n  width: 1rem;\n}\n"}},"excerpt":"","more":"<p>记录一下上周遇到的问题和解决方法。</p>\n<p>antd pro官方推荐了dva进行数据流管理，因为官网有教程就不细说原理了，主要讲一下遇到的问题。</p>\n<p>使用dva进行状态管理时出现了一个需求，需要使用同一个接口的不同query参数的返回值作为不同页面的展示数据。</p>\n<p>但当某个需要query参数过滤的页面使用useEffect配合dispatch修改数据后，一下子出现了两次请求。当然，这个现象很合理。</p>\n<p>一次是没加query参数的请求，一次是加上的。但是我没办法控制页面到底获取的是哪次请求获得的数据，实际上看下来好像拿到的都是第一次没加参数的数据，这当然不是我想要的。</p>\n<p>本来有个做法是在获取请求并处理数据的hook这一层做一个判断，当有参数时使用第一种方式取值，没有时使用第二种。但是hook中useEffect的依赖项又出现了dispatch后一定会改变的值，导致了数据无限刷新。所以这个方法不行。</p>\n<p>后来在同事的帮助下使用了lodash中的debounce做了一个去抖。</p>\n<blockquote>\n<p>debounce: 当调用动作n毫秒后，才会执行该动作，若在这n毫秒内又调用此动作则将重新计算执行时间。</p>\n</blockquote>\n<p>实际在请求这个数据时，第一次请求是初始定义的没有参数的请求，第二次则是在使用了dispatch修改了请求参数导致的再请求，因为两次的间隔很短，而我们只需要第二次的请求结果，所以可以直接取消第一次的请求。</p>\n<p>大致做法是使用下面这个函数替换掉原来的dispatch部分。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const debouncePatch = debounce(</span><br><span class=\"line\">    (&#123;params,dispatch&#125;) =&gt;</span><br><span class=\"line\">        dispatch(&#123;<span class=\"built_in\">type</span>: <span class=\"string\">&quot;fetchData&quot;</span>, payload: &#123;params&#125;&#125;),</span><br><span class=\"line\">    200,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">//原本的写法</span><br><span class=\"line\">    dispatch(&#123;</span><br><span class=\"line\">        <span class=\"built_in\">type</span>: <span class=\"string\">&quot;fetchData&quot;</span>,</span><br><span class=\"line\">        payload: &#123;params&#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//替换的写法</span><br><span class=\"line\">    debouncePatch(&#123;</span><br><span class=\"line\">        dispatch,</span><br><span class=\"line\">        params,</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n"},{"title":"hexo启动失败：line.matchAll is not a function","date":"2021-05-16T07:59:36.000Z","_content":"\n之前是输入 hexo 命令是可以正常启动的，今天试着写第一篇文章发现hexo的命令都用不了，会报下面这个错。\n\n``` bash\n(node:28558) ExperimentalWarning: The fs.promises API is experimental\nINFO  Validating config\nINFO  Start processing\nFATAL { err:\n   TypeError: line.matchAll is not a function\n       at res.value.res.value.split.map.line (/blog/blog/node_modules/hexo-util/lib/highlight.js:128:26)\n       at Array.map (<anonymous>)\n       at closeTags (/blog/blog/node_modules/hexo-util/lib/highlight.js:126:37)\n       at highlight (/blog/blog/node_modules/hexo-util/lib/highlight.js:119:10)\n       at highlightUtil (/blog/blog/node_modules/hexo-util/lib/highlight.js:23:16)\n       at data.content.dataContent.replace (/blog/blog/node_modules/hexo/lib/plugins/filter/before_post_render/backtick_code_block.js:92:17)\n       at String.replace (<anonymous>)\n       at Hexo.backtickCodeBlock (/blog/blog/node_modules/hexo/lib/plugins/filter/before_post_render/backtick_code_block.js:19:30)\n       at Hexo.tryCatcher (/blog/blog/node_modules/bluebird/js/release/util.js:16:23)\n       at Hexo.<anonymous> (/blog/blog/node_modules/bluebird/js/release/method.js:15:34)\n       at Promise.each.filter (/blog/blog/node_modules/hexo/lib/extend/filter.js:67:52)\n       at tryCatcher (/blog/blog/node_modules/bluebird/js/release/util.js:16:23)\n       at Object.gotValue (/blog/blog/node_modules/bluebird/js/release/reduce.js:166:18)\n       at Object.gotAccum (/blog/blog/node_modules/bluebird/js/release/reduce.js:155:25)\n       at Object.tryCatcher (/blog/blog/node_modules/bluebird/js/release/util.js:16:23)\n       at Promise._settlePromiseFromHandler (/blog/blog/node_modules/bluebird/js/release/promise.js:547:31)\n       at Promise._settlePromise (/blog/blog/node_modules/bluebird/js/release/promise.js:604:18)\n       at Promise._settlePromiseCtx (/blog/blog/node_modules/bluebird/js/release/promise.js:641:10)\n       at _drainQueueStep (/blog/blog/node_modules/bluebird/js/release/async.js:97:12)\n       at _drainQueue (/blog/blog/node_modules/bluebird/js/release/async.js:86:9)\n       at Async._drainQueues (/blog/blog/node_modules/bluebird/js/release/async.js:102:5)\n       at Immediate.Async.drainQueues [as _onImmediate] (/blog/blog/node_modules/bluebird/js/release/async.js:15:14) } 'Something\\'s wrong. Maybe you can find the solution here: %s' '\\u001b[4mhttps://hexo.io/docs/troubleshooting.html\\u001b[24m'\n```\n\n随便搜了一下没发现解决办法，后来想了下可能是node版本问题。\n因为第一次用hexo启动时我在提示下会切换到 v12.4.0 版本，今天重新开了一个命令行后node版本就不对了，我用的又是比较新的hexo版本，系统默认的node版本又比较旧。\n\n可以尝试用nvm切换node版本到v12.4.0，下面是我正常启动的版本信息以供参考。\n\n``` bash\n% hexo -v\nINFO  Validating config\nhexo: 5.4.0\nhexo-cli: 4.2.0\nos: Darwin 19.6.0 darwin x64\nnode: 12.4.0\nv8: 7.4.288.27-node.18\nuv: 1.29.1\nzlib: 1.2.11\nbrotli: 1.0.7\nares: 1.15.0\nmodules: 72\nnghttp2: 1.38.0\nnapi: 4\nllhttp: 1.1.3\nhttp_parser: 2.8.0\nopenssl: 1.1.1b\ncldr: 35.1\nicu: 64.2\ntz: 2019a\nunicode: 12.1\n``` \n\n这实际是一篇测试文章，写的比较简单。","source":"_posts/function.md","raw":"---\ntitle: hexo启动失败：line.matchAll is not a function\ndate: 2021-05-16 15:59:36\ntags: \n- hexo\n- 踩坑\ncategories: \n- CS\n---\n\n之前是输入 hexo 命令是可以正常启动的，今天试着写第一篇文章发现hexo的命令都用不了，会报下面这个错。\n\n``` bash\n(node:28558) ExperimentalWarning: The fs.promises API is experimental\nINFO  Validating config\nINFO  Start processing\nFATAL { err:\n   TypeError: line.matchAll is not a function\n       at res.value.res.value.split.map.line (/blog/blog/node_modules/hexo-util/lib/highlight.js:128:26)\n       at Array.map (<anonymous>)\n       at closeTags (/blog/blog/node_modules/hexo-util/lib/highlight.js:126:37)\n       at highlight (/blog/blog/node_modules/hexo-util/lib/highlight.js:119:10)\n       at highlightUtil (/blog/blog/node_modules/hexo-util/lib/highlight.js:23:16)\n       at data.content.dataContent.replace (/blog/blog/node_modules/hexo/lib/plugins/filter/before_post_render/backtick_code_block.js:92:17)\n       at String.replace (<anonymous>)\n       at Hexo.backtickCodeBlock (/blog/blog/node_modules/hexo/lib/plugins/filter/before_post_render/backtick_code_block.js:19:30)\n       at Hexo.tryCatcher (/blog/blog/node_modules/bluebird/js/release/util.js:16:23)\n       at Hexo.<anonymous> (/blog/blog/node_modules/bluebird/js/release/method.js:15:34)\n       at Promise.each.filter (/blog/blog/node_modules/hexo/lib/extend/filter.js:67:52)\n       at tryCatcher (/blog/blog/node_modules/bluebird/js/release/util.js:16:23)\n       at Object.gotValue (/blog/blog/node_modules/bluebird/js/release/reduce.js:166:18)\n       at Object.gotAccum (/blog/blog/node_modules/bluebird/js/release/reduce.js:155:25)\n       at Object.tryCatcher (/blog/blog/node_modules/bluebird/js/release/util.js:16:23)\n       at Promise._settlePromiseFromHandler (/blog/blog/node_modules/bluebird/js/release/promise.js:547:31)\n       at Promise._settlePromise (/blog/blog/node_modules/bluebird/js/release/promise.js:604:18)\n       at Promise._settlePromiseCtx (/blog/blog/node_modules/bluebird/js/release/promise.js:641:10)\n       at _drainQueueStep (/blog/blog/node_modules/bluebird/js/release/async.js:97:12)\n       at _drainQueue (/blog/blog/node_modules/bluebird/js/release/async.js:86:9)\n       at Async._drainQueues (/blog/blog/node_modules/bluebird/js/release/async.js:102:5)\n       at Immediate.Async.drainQueues [as _onImmediate] (/blog/blog/node_modules/bluebird/js/release/async.js:15:14) } 'Something\\'s wrong. Maybe you can find the solution here: %s' '\\u001b[4mhttps://hexo.io/docs/troubleshooting.html\\u001b[24m'\n```\n\n随便搜了一下没发现解决办法，后来想了下可能是node版本问题。\n因为第一次用hexo启动时我在提示下会切换到 v12.4.0 版本，今天重新开了一个命令行后node版本就不对了，我用的又是比较新的hexo版本，系统默认的node版本又比较旧。\n\n可以尝试用nvm切换node版本到v12.4.0，下面是我正常启动的版本信息以供参考。\n\n``` bash\n% hexo -v\nINFO  Validating config\nhexo: 5.4.0\nhexo-cli: 4.2.0\nos: Darwin 19.6.0 darwin x64\nnode: 12.4.0\nv8: 7.4.288.27-node.18\nuv: 1.29.1\nzlib: 1.2.11\nbrotli: 1.0.7\nares: 1.15.0\nmodules: 72\nnghttp2: 1.38.0\nnapi: 4\nllhttp: 1.1.3\nhttp_parser: 2.8.0\nopenssl: 1.1.1b\ncldr: 35.1\nicu: 64.2\ntz: 2019a\nunicode: 12.1\n``` \n\n这实际是一篇测试文章，写的比较简单。","slug":"function","published":1,"updated":"2021-07-17T08:31:29.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks69zwto00036bt6bjyx21s5","content":"<p>之前是输入 hexo 命令是可以正常启动的，今天试着写第一篇文章发现hexo的命令都用不了，会报下面这个错。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(node:28558) ExperimentalWarning: The fs.promises API is experimental</span><br><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">FATAL &#123; err:</span><br><span class=\"line\">   TypeError: line.matchAll is not a <span class=\"keyword\">function</span></span><br><span class=\"line\">       at res.value.res.value.split.map.line (/blog/blog/node_modules/hexo-util/lib/highlight.js:128:26)</span><br><span class=\"line\">       at Array.map (&lt;anonymous&gt;)</span><br><span class=\"line\">       at closeTags (/blog/blog/node_modules/hexo-util/lib/highlight.js:126:37)</span><br><span class=\"line\">       at highlight (/blog/blog/node_modules/hexo-util/lib/highlight.js:119:10)</span><br><span class=\"line\">       at highlightUtil (/blog/blog/node_modules/hexo-util/lib/highlight.js:23:16)</span><br><span class=\"line\">       at data.content.dataContent.replace (/blog/blog/node_modules/hexo/lib/plugins/filter/before_post_render/backtick_code_block.js:92:17)</span><br><span class=\"line\">       at String.replace (&lt;anonymous&gt;)</span><br><span class=\"line\">       at Hexo.backtickCodeBlock (/blog/blog/node_modules/hexo/lib/plugins/filter/before_post_render/backtick_code_block.js:19:30)</span><br><span class=\"line\">       at Hexo.tryCatcher (/blog/blog/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class=\"line\">       at Hexo.&lt;anonymous&gt; (/blog/blog/node_modules/bluebird/js/release/method.js:15:34)</span><br><span class=\"line\">       at Promise.each.filter (/blog/blog/node_modules/hexo/lib/extend/filter.js:67:52)</span><br><span class=\"line\">       at tryCatcher (/blog/blog/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class=\"line\">       at Object.gotValue (/blog/blog/node_modules/bluebird/js/release/reduce.js:166:18)</span><br><span class=\"line\">       at Object.gotAccum (/blog/blog/node_modules/bluebird/js/release/reduce.js:155:25)</span><br><span class=\"line\">       at Object.tryCatcher (/blog/blog/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class=\"line\">       at Promise._settlePromiseFromHandler (/blog/blog/node_modules/bluebird/js/release/promise.js:547:31)</span><br><span class=\"line\">       at Promise._settlePromise (/blog/blog/node_modules/bluebird/js/release/promise.js:604:18)</span><br><span class=\"line\">       at Promise._settlePromiseCtx (/blog/blog/node_modules/bluebird/js/release/promise.js:641:10)</span><br><span class=\"line\">       at _drainQueueStep (/blog/blog/node_modules/bluebird/js/release/async.js:97:12)</span><br><span class=\"line\">       at _drainQueue (/blog/blog/node_modules/bluebird/js/release/async.js:86:9)</span><br><span class=\"line\">       at Async._drainQueues (/blog/blog/node_modules/bluebird/js/release/async.js:102:5)</span><br><span class=\"line\">       at Immediate.Async.drainQueues [as _onImmediate] (/blog/blog/node_modules/bluebird/js/release/async.js:15:14) &#125; <span class=\"string\">&#x27;Something\\&#x27;</span>s wrong. Maybe you can find the solution here: %s<span class=\"string\">&#x27; &#x27;</span>\\u001b[4mhttps://hexo.io/docs/troubleshooting.html\\u001b[24m<span class=\"string\">&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>随便搜了一下没发现解决办法，后来想了下可能是node版本问题。<br>因为第一次用hexo启动时我在提示下会切换到 v12.4.0 版本，今天重新开了一个命令行后node版本就不对了，我用的又是比较新的hexo版本，系统默认的node版本又比较旧。</p>\n<p>可以尝试用nvm切换node版本到v12.4.0，下面是我正常启动的版本信息以供参考。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">% hexo -v</span><br><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">hexo: 5.4.0</span><br><span class=\"line\">hexo-cli: 4.2.0</span><br><span class=\"line\">os: Darwin 19.6.0 darwin x64</span><br><span class=\"line\">node: 12.4.0</span><br><span class=\"line\">v8: 7.4.288.27-node.18</span><br><span class=\"line\">uv: 1.29.1</span><br><span class=\"line\">zlib: 1.2.11</span><br><span class=\"line\">brotli: 1.0.7</span><br><span class=\"line\">ares: 1.15.0</span><br><span class=\"line\">modules: 72</span><br><span class=\"line\">nghttp2: 1.38.0</span><br><span class=\"line\">napi: 4</span><br><span class=\"line\">llhttp: 1.1.3</span><br><span class=\"line\">http_parser: 2.8.0</span><br><span class=\"line\">openssl: 1.1.1b</span><br><span class=\"line\">cldr: 35.1</span><br><span class=\"line\">icu: 64.2</span><br><span class=\"line\">tz: 2019a</span><br><span class=\"line\">unicode: 12.1</span><br></pre></td></tr></table></figure>\n\n<p>这实际是一篇测试文章，写的比较简单。</p>\n","site":{"data":{"styles":".fa-bilibili {\n  background: url(\"/images/bilibili-fill.svg\");\n  background-position: 50% 260%;\n  background-repeat: no-repeat;\n  height: 1rem;\n  width: 1rem;\n}\n"}},"excerpt":"","more":"<p>之前是输入 hexo 命令是可以正常启动的，今天试着写第一篇文章发现hexo的命令都用不了，会报下面这个错。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(node:28558) ExperimentalWarning: The fs.promises API is experimental</span><br><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">FATAL &#123; err:</span><br><span class=\"line\">   TypeError: line.matchAll is not a <span class=\"keyword\">function</span></span><br><span class=\"line\">       at res.value.res.value.split.map.line (/blog/blog/node_modules/hexo-util/lib/highlight.js:128:26)</span><br><span class=\"line\">       at Array.map (&lt;anonymous&gt;)</span><br><span class=\"line\">       at closeTags (/blog/blog/node_modules/hexo-util/lib/highlight.js:126:37)</span><br><span class=\"line\">       at highlight (/blog/blog/node_modules/hexo-util/lib/highlight.js:119:10)</span><br><span class=\"line\">       at highlightUtil (/blog/blog/node_modules/hexo-util/lib/highlight.js:23:16)</span><br><span class=\"line\">       at data.content.dataContent.replace (/blog/blog/node_modules/hexo/lib/plugins/filter/before_post_render/backtick_code_block.js:92:17)</span><br><span class=\"line\">       at String.replace (&lt;anonymous&gt;)</span><br><span class=\"line\">       at Hexo.backtickCodeBlock (/blog/blog/node_modules/hexo/lib/plugins/filter/before_post_render/backtick_code_block.js:19:30)</span><br><span class=\"line\">       at Hexo.tryCatcher (/blog/blog/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class=\"line\">       at Hexo.&lt;anonymous&gt; (/blog/blog/node_modules/bluebird/js/release/method.js:15:34)</span><br><span class=\"line\">       at Promise.each.filter (/blog/blog/node_modules/hexo/lib/extend/filter.js:67:52)</span><br><span class=\"line\">       at tryCatcher (/blog/blog/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class=\"line\">       at Object.gotValue (/blog/blog/node_modules/bluebird/js/release/reduce.js:166:18)</span><br><span class=\"line\">       at Object.gotAccum (/blog/blog/node_modules/bluebird/js/release/reduce.js:155:25)</span><br><span class=\"line\">       at Object.tryCatcher (/blog/blog/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class=\"line\">       at Promise._settlePromiseFromHandler (/blog/blog/node_modules/bluebird/js/release/promise.js:547:31)</span><br><span class=\"line\">       at Promise._settlePromise (/blog/blog/node_modules/bluebird/js/release/promise.js:604:18)</span><br><span class=\"line\">       at Promise._settlePromiseCtx (/blog/blog/node_modules/bluebird/js/release/promise.js:641:10)</span><br><span class=\"line\">       at _drainQueueStep (/blog/blog/node_modules/bluebird/js/release/async.js:97:12)</span><br><span class=\"line\">       at _drainQueue (/blog/blog/node_modules/bluebird/js/release/async.js:86:9)</span><br><span class=\"line\">       at Async._drainQueues (/blog/blog/node_modules/bluebird/js/release/async.js:102:5)</span><br><span class=\"line\">       at Immediate.Async.drainQueues [as _onImmediate] (/blog/blog/node_modules/bluebird/js/release/async.js:15:14) &#125; <span class=\"string\">&#x27;Something\\&#x27;</span>s wrong. Maybe you can find the solution here: %s<span class=\"string\">&#x27; &#x27;</span>\\u001b[4mhttps://hexo.io/docs/troubleshooting.html\\u001b[24m<span class=\"string\">&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>随便搜了一下没发现解决办法，后来想了下可能是node版本问题。<br>因为第一次用hexo启动时我在提示下会切换到 v12.4.0 版本，今天重新开了一个命令行后node版本就不对了，我用的又是比较新的hexo版本，系统默认的node版本又比较旧。</p>\n<p>可以尝试用nvm切换node版本到v12.4.0，下面是我正常启动的版本信息以供参考。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">% hexo -v</span><br><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">hexo: 5.4.0</span><br><span class=\"line\">hexo-cli: 4.2.0</span><br><span class=\"line\">os: Darwin 19.6.0 darwin x64</span><br><span class=\"line\">node: 12.4.0</span><br><span class=\"line\">v8: 7.4.288.27-node.18</span><br><span class=\"line\">uv: 1.29.1</span><br><span class=\"line\">zlib: 1.2.11</span><br><span class=\"line\">brotli: 1.0.7</span><br><span class=\"line\">ares: 1.15.0</span><br><span class=\"line\">modules: 72</span><br><span class=\"line\">nghttp2: 1.38.0</span><br><span class=\"line\">napi: 4</span><br><span class=\"line\">llhttp: 1.1.3</span><br><span class=\"line\">http_parser: 2.8.0</span><br><span class=\"line\">openssl: 1.1.1b</span><br><span class=\"line\">cldr: 35.1</span><br><span class=\"line\">icu: 64.2</span><br><span class=\"line\">tz: 2019a</span><br><span class=\"line\">unicode: 12.1</span><br></pre></td></tr></table></figure>\n\n<p>这实际是一篇测试文章，写的比较简单。</p>\n"},{"title":"关键词高亮真好玩doge.jpg","date":"2021-08-10T15:42:33.000Z","_content":"\n上周因为做了一个全文搜索的功能一直在烧脑细胞。\n~~写接口真好玩、搜索真好玩、算关键词高亮坐标真好玩~~\n\n但其实这篇不打算写正经内容。写关键词的时候再次发现自己的递归水平实在太过废物，还是同事帮忙一起看才搞定了高亮算法，不过好像被我搞出了新bug，手动doge。想找个时间集中刷一刷递归的题，为什么都快一年了我还是这么菜，悲伤。\n\n虽然前两周搬到了公司40min路程的新家，但由于最近心情巨差导致几乎一直在生病都没时间好好学新东西，悲伤*2。\n\neve手游真是和它的端游一脉相承，至今没有找到它的正确玩法，不愧是游戏自由度标杆之一，玩不明白。\n\n好在最近还有一两部喜欢的番出第二季了可以收获短暂的快乐。\n\n前两天还和一个朋友在人广附近的几个公园暴走了2.5w步，这么热的天我们真是太强了。运动原来真的能使人快乐，虽然只有短暂的几小时作用，悲伤*3。\n\n真是写了一篇巨无聊的自言自语流水账。\n\n所以石之海为什么要明年一月才出！好吧，出了等看到承太郎结局我就要悲伤*4了。\n\n\n\n","source":"_posts/关键词高亮真好玩doge.md","raw":"---\ntitle: 关键词高亮真好玩doge.jpg\ndate: 2021-08-10 23:42:33\ntags: \n- 生活\ncategories: \n- 日常\n---\n\n上周因为做了一个全文搜索的功能一直在烧脑细胞。\n~~写接口真好玩、搜索真好玩、算关键词高亮坐标真好玩~~\n\n但其实这篇不打算写正经内容。写关键词的时候再次发现自己的递归水平实在太过废物，还是同事帮忙一起看才搞定了高亮算法，不过好像被我搞出了新bug，手动doge。想找个时间集中刷一刷递归的题，为什么都快一年了我还是这么菜，悲伤。\n\n虽然前两周搬到了公司40min路程的新家，但由于最近心情巨差导致几乎一直在生病都没时间好好学新东西，悲伤*2。\n\neve手游真是和它的端游一脉相承，至今没有找到它的正确玩法，不愧是游戏自由度标杆之一，玩不明白。\n\n好在最近还有一两部喜欢的番出第二季了可以收获短暂的快乐。\n\n前两天还和一个朋友在人广附近的几个公园暴走了2.5w步，这么热的天我们真是太强了。运动原来真的能使人快乐，虽然只有短暂的几小时作用，悲伤*3。\n\n真是写了一篇巨无聊的自言自语流水账。\n\n所以石之海为什么要明年一月才出！好吧，出了等看到承太郎结局我就要悲伤*4了。\n\n\n\n","slug":"关键词高亮真好玩doge","published":1,"updated":"2021-08-10T16:24:32.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks69zwtu00076bt67xmve8ll","content":"<p>上周因为做了一个全文搜索的功能一直在烧脑细胞。<br><del>写接口真好玩、搜索真好玩、算关键词高亮坐标真好玩</del></p>\n<p>但其实这篇不打算写正经内容。写关键词的时候再次发现自己的递归水平实在太过废物，还是同事帮忙一起看才搞定了高亮算法，不过好像被我搞出了新bug，手动doge。想找个时间集中刷一刷递归的题，为什么都快一年了我还是这么菜，悲伤。</p>\n<p>虽然前两周搬到了公司40min路程的新家，但由于最近心情巨差导致几乎一直在生病都没时间好好学新东西，悲伤*2。</p>\n<p>eve手游真是和它的端游一脉相承，至今没有找到它的正确玩法，不愧是游戏自由度标杆之一，玩不明白。</p>\n<p>好在最近还有一两部喜欢的番出第二季了可以收获短暂的快乐。</p>\n<p>前两天还和一个朋友在人广附近的几个公园暴走了2.5w步，这么热的天我们真是太强了。运动原来真的能使人快乐，虽然只有短暂的几小时作用，悲伤*3。</p>\n<p>真是写了一篇巨无聊的自言自语流水账。</p>\n<p>所以石之海为什么要明年一月才出！好吧，出了等看到承太郎结局我就要悲伤*4了。</p>\n","site":{"data":{"styles":".fa-bilibili {\n  background: url(\"/images/bilibili-fill.svg\");\n  background-position: 50% 260%;\n  background-repeat: no-repeat;\n  height: 1rem;\n  width: 1rem;\n}\n"}},"excerpt":"","more":"<p>上周因为做了一个全文搜索的功能一直在烧脑细胞。<br><del>写接口真好玩、搜索真好玩、算关键词高亮坐标真好玩</del></p>\n<p>但其实这篇不打算写正经内容。写关键词的时候再次发现自己的递归水平实在太过废物，还是同事帮忙一起看才搞定了高亮算法，不过好像被我搞出了新bug，手动doge。想找个时间集中刷一刷递归的题，为什么都快一年了我还是这么菜，悲伤。</p>\n<p>虽然前两周搬到了公司40min路程的新家，但由于最近心情巨差导致几乎一直在生病都没时间好好学新东西，悲伤*2。</p>\n<p>eve手游真是和它的端游一脉相承，至今没有找到它的正确玩法，不愧是游戏自由度标杆之一，玩不明白。</p>\n<p>好在最近还有一两部喜欢的番出第二季了可以收获短暂的快乐。</p>\n<p>前两天还和一个朋友在人广附近的几个公园暴走了2.5w步，这么热的天我们真是太强了。运动原来真的能使人快乐，虽然只有短暂的几小时作用，悲伤*3。</p>\n<p>真是写了一篇巨无聊的自言自语流水账。</p>\n<p>所以石之海为什么要明年一月才出！好吧，出了等看到承太郎结局我就要悲伤*4了。</p>\n"},{"title":"可配置抽奖转盘遇到的一些坑和处理方法","date":"2021-08-02T14:42:04.000Z","_content":"\n前阵子因为需求改动，把之前写过的可配置抽奖转盘的抽奖判断逻辑重写了一遍，还解决了一个兼容性问题，简单记录下。\n\n**目录**\n    **[一、setTimeout制作动画在Safari中掉帧](#111)**\n    **[二、用状态机（伪）管理不同抽奖逻辑](#222)**\n\n<br/>\n\n**<p id=\"111\">一、setTimeout制作动画在Safari中掉帧</p>**\n\n代码的实现逻辑是使用canvas根据奖品数量动态绘制转盘角度生成静止的一帧，然后使用定时器修改绘制的起始角度，每隔一段时间重绘一张转盘实现动画效果。\n\n问题出在最开始是使用setTimeout实现这个定时绘制的功能，但是转动效果在苹果手机上非常糟糕，掉帧极其严重。在微信开发者工具上也复现不出问题，就猜测是Safari的兼容性问题,发现setTimeout和setInterval在Safari上的兼容性不大好。在同事的提示下换成了requestAnimationFrame，动画就流畅了很多。\n\n至于原因懒得再总结了，我觉得这个人讲的很清楚。[requestAnimationFram和setTimeout执行的先后](https://blog.csdn.net/weixin_30312557/article/details/100093720)\n\n\n> - requestAnimationFrame 执行步伐跟着系统的绘制频率走，就是说屏幕分辨率 和 屏幕尺寸会影响requestAnimationFrame的回调函数执行时间。\n\n> - setTimeout 执行只是在内存中通过设置一个间隔时间来运行代码，HTML5标准规定了setTimeout()的第二个参数的最小值（最短间隔），不得低于4毫秒，如果低于这个值，就会自动增加。在此之前，老版本的浏览器都将最短间隔设为10毫秒。另外，对于那些DOM的变动（尤其是涉及页面重新渲染的部分），通常不会立即执行，而是每16毫秒执行一次。同时setTimeout 任务被放进了异步队列中，只有当主线程上的任务执行完以后，才会去检查该队列里的任务是否需要开始执行，所以 setTimeout 的实际执行时机一般要比其设定的时间晚一些。\n\n两者执行的快慢影响因素：\n> - requestAnimationFrame受系统的绘制频率影响，即屏幕分辨率 和 屏幕尺寸\n\n> - setTimeout 受任务队列和页面渲染有关\n\n比较麻烦的点在于动画逻辑需要修改，大概修改如下。\n\n使用setTimeout的大概写法：\n```bash\n    const interval = 10;\n    const result = \"一等奖\";\n    for (let i = 1; i < condition; i += 1) {\n        const timeId = setTimeout(() => {\n\n          // 一些需要循环的操作\n          setStart(interval * i);\n\n          // 满足停止条件时结束，没错这动画我居然包了层promise写\n          if (i === condition) {\n            resolve(result);\n            clearTimeout(timeId);\n          }\n\n        }, 100);\n    }\n```\n\n使用requestAnimationFrame的大概写法：\n```bash\n    const interval = 10;\n    const result = \"一等奖\";\n\n    let i = 1;\n    // 回调函数\n    function animloop() {\n        i += 1;\n        // 一些需要循环的操作\n        setStart(interval * i);\n        \n        // 在没有满足条件前递归\n        if (i < condition) {\n            window.requestAnimationFrame(animloop);\n        }\n\n        // 满足停止条件时结束\n        if (i === condition) {\n            resolve(result);\n        }\n    }\n\n    // 第一帧渲染\n    window.requestAnimationFrame(animloop);\n```\n<br/>\n\n**<p id=\"222\">二、用状态机（伪）管理不同抽奖逻辑</p>**\n\n因为这是个可配置的抽奖活动，导致灵活度非常高。点击抽奖按钮之后需要做的条件判断非常之多，而且因为可配置的原因也非常复杂.再加上需求的变化，原本分散在不同组件中的判断逻辑需要整合到一个按钮上，于是就干脆重写了判断逻辑。\n\n比如点击抽奖按钮之后，需要查看用户的抽奖次数、信息填写情况、配置填写用户信息的时机、活动时间等等等。\n\n原先的做法是在不同组件内进行判断，并将不同判断结果发到一个中心化的数据中心管理，再在不同需要判断的地方调用这些结果进行一层一层判断。这样写的麻烦之处在于有很多条件的判断是耦合的，不是很好拆，而且如果需求一改动，在耦合的判断逻辑下（而且还是不同组件），改起来很恶心。~~虽然主要原因还是我原先代码写的太烂了。~~\n\n后来想起来隔壁后端同事之前在搞可配置的发布流程管理，这一层层的条件逻辑判断以及状态改变达到不同页面（对抽奖而言就是不同提示），似乎有点眼熟。记得之前听到测试妹子说是用有限状态机写的，于是走投无路（并没有）的我研究了起状态机。\n\n鉴于我很懒，只摘录了我觉得比较有用的概念。\n\n> - 第一个是 State ，状态。一个状态机至少要包含两个状态。例如上面自动门的例子，有 open 和 closed 两个状态。\n\n> - 第二个是 Event ，事件。事件就是执行某个操作的触发条件或者口令。对于自动门，“按下开门按钮”就是一个事件。\n\n> - 第三个是 Action ，动作。事件发生以后要执行动作。例如事件是“按开门按钮”，动作是“开门”。编程的时候，一个 Action 一般就对应一个函数。\n\n> - 第四个是 Transition ，变换。也就是从一个状态变化为另一个状态。例如“开门过程”就是一个变换。\n\n**比如抽奖流程：点击开始抽奖=>验证身份=>验证活动时间=>验证抽奖剩余次数=>抽奖**\n\n上面这个是我随便写的，大概意思是一个抽奖行为是有流程的，虽然只是一个点击按钮其实是有非常多状态的改变的。然后在不同状态下会有不同需要触发的行为，并且它还要改变到下一个状态。\n\n当使用这套逻辑时，整个流程的判断就可以都放到一起，代码会好理解很多，改起来也没那么恶心了。\n\n为啥说伪呢，因为下面这个是一个简陋实现版~~*乞丐版*~~：\n\n```bash\n    const [lotteryState, setLotteryState] = useState<string | undefined>();\n\n    const getState = async () => {\n        switch (lotteryState) {\n            case 'start':\n                if (条件1) {\n                    setLotteryState('状态A');\n                } else {\n                    store.reducers.doActionEnd;\n                    setLotteryState('end');\n                }\n                break;\n            case '状态A':\n                if (条件2) {\n                    store.reducers.doAction111;\n                    setLotteryState('状态B');\n                } else {\n                    store.reducers.doAction222;\n                    setLotteryState('状态C');\n                }\n                break;\n            case '状态B':\n                if (条件3) {\n                    store.reducers.doAction444;\n                    setLotteryState('状态C');\n                } else {\n                    store.reducers.doActionEnd;\n                    setLotteryState('end');\n                }\n                break;\n            case '状态C':\n                if (条件4) {\n                    store.reducers.doAction555;\n                    setLotteryState('end');\n                } else {\n                    store.reducers.doActionEnd;\n                    setLotteryState('end');\n                }\n                break;\n            case 'end':\n                break;\n            default:\n                break;\n            }\n    }\n\n    const lottery = async () => {\n        setLotteryState('start');\n    };\n\n    return (\n        <img onClick={lottery}/>\n    );\n```","source":"_posts/可配置抽奖转盘遇到的一些坑和处理方法.md","raw":"---\ntitle: 可配置抽奖转盘遇到的一些坑和处理方法\ndate: 2021-08-02 22:42:04\ntags: \n- 踩坑\n- 兼容性\n- 状态机\ncategories: \n- CS\n- 前端\n---\n\n前阵子因为需求改动，把之前写过的可配置抽奖转盘的抽奖判断逻辑重写了一遍，还解决了一个兼容性问题，简单记录下。\n\n**目录**\n    **[一、setTimeout制作动画在Safari中掉帧](#111)**\n    **[二、用状态机（伪）管理不同抽奖逻辑](#222)**\n\n<br/>\n\n**<p id=\"111\">一、setTimeout制作动画在Safari中掉帧</p>**\n\n代码的实现逻辑是使用canvas根据奖品数量动态绘制转盘角度生成静止的一帧，然后使用定时器修改绘制的起始角度，每隔一段时间重绘一张转盘实现动画效果。\n\n问题出在最开始是使用setTimeout实现这个定时绘制的功能，但是转动效果在苹果手机上非常糟糕，掉帧极其严重。在微信开发者工具上也复现不出问题，就猜测是Safari的兼容性问题,发现setTimeout和setInterval在Safari上的兼容性不大好。在同事的提示下换成了requestAnimationFrame，动画就流畅了很多。\n\n至于原因懒得再总结了，我觉得这个人讲的很清楚。[requestAnimationFram和setTimeout执行的先后](https://blog.csdn.net/weixin_30312557/article/details/100093720)\n\n\n> - requestAnimationFrame 执行步伐跟着系统的绘制频率走，就是说屏幕分辨率 和 屏幕尺寸会影响requestAnimationFrame的回调函数执行时间。\n\n> - setTimeout 执行只是在内存中通过设置一个间隔时间来运行代码，HTML5标准规定了setTimeout()的第二个参数的最小值（最短间隔），不得低于4毫秒，如果低于这个值，就会自动增加。在此之前，老版本的浏览器都将最短间隔设为10毫秒。另外，对于那些DOM的变动（尤其是涉及页面重新渲染的部分），通常不会立即执行，而是每16毫秒执行一次。同时setTimeout 任务被放进了异步队列中，只有当主线程上的任务执行完以后，才会去检查该队列里的任务是否需要开始执行，所以 setTimeout 的实际执行时机一般要比其设定的时间晚一些。\n\n两者执行的快慢影响因素：\n> - requestAnimationFrame受系统的绘制频率影响，即屏幕分辨率 和 屏幕尺寸\n\n> - setTimeout 受任务队列和页面渲染有关\n\n比较麻烦的点在于动画逻辑需要修改，大概修改如下。\n\n使用setTimeout的大概写法：\n```bash\n    const interval = 10;\n    const result = \"一等奖\";\n    for (let i = 1; i < condition; i += 1) {\n        const timeId = setTimeout(() => {\n\n          // 一些需要循环的操作\n          setStart(interval * i);\n\n          // 满足停止条件时结束，没错这动画我居然包了层promise写\n          if (i === condition) {\n            resolve(result);\n            clearTimeout(timeId);\n          }\n\n        }, 100);\n    }\n```\n\n使用requestAnimationFrame的大概写法：\n```bash\n    const interval = 10;\n    const result = \"一等奖\";\n\n    let i = 1;\n    // 回调函数\n    function animloop() {\n        i += 1;\n        // 一些需要循环的操作\n        setStart(interval * i);\n        \n        // 在没有满足条件前递归\n        if (i < condition) {\n            window.requestAnimationFrame(animloop);\n        }\n\n        // 满足停止条件时结束\n        if (i === condition) {\n            resolve(result);\n        }\n    }\n\n    // 第一帧渲染\n    window.requestAnimationFrame(animloop);\n```\n<br/>\n\n**<p id=\"222\">二、用状态机（伪）管理不同抽奖逻辑</p>**\n\n因为这是个可配置的抽奖活动，导致灵活度非常高。点击抽奖按钮之后需要做的条件判断非常之多，而且因为可配置的原因也非常复杂.再加上需求的变化，原本分散在不同组件中的判断逻辑需要整合到一个按钮上，于是就干脆重写了判断逻辑。\n\n比如点击抽奖按钮之后，需要查看用户的抽奖次数、信息填写情况、配置填写用户信息的时机、活动时间等等等。\n\n原先的做法是在不同组件内进行判断，并将不同判断结果发到一个中心化的数据中心管理，再在不同需要判断的地方调用这些结果进行一层一层判断。这样写的麻烦之处在于有很多条件的判断是耦合的，不是很好拆，而且如果需求一改动，在耦合的判断逻辑下（而且还是不同组件），改起来很恶心。~~虽然主要原因还是我原先代码写的太烂了。~~\n\n后来想起来隔壁后端同事之前在搞可配置的发布流程管理，这一层层的条件逻辑判断以及状态改变达到不同页面（对抽奖而言就是不同提示），似乎有点眼熟。记得之前听到测试妹子说是用有限状态机写的，于是走投无路（并没有）的我研究了起状态机。\n\n鉴于我很懒，只摘录了我觉得比较有用的概念。\n\n> - 第一个是 State ，状态。一个状态机至少要包含两个状态。例如上面自动门的例子，有 open 和 closed 两个状态。\n\n> - 第二个是 Event ，事件。事件就是执行某个操作的触发条件或者口令。对于自动门，“按下开门按钮”就是一个事件。\n\n> - 第三个是 Action ，动作。事件发生以后要执行动作。例如事件是“按开门按钮”，动作是“开门”。编程的时候，一个 Action 一般就对应一个函数。\n\n> - 第四个是 Transition ，变换。也就是从一个状态变化为另一个状态。例如“开门过程”就是一个变换。\n\n**比如抽奖流程：点击开始抽奖=>验证身份=>验证活动时间=>验证抽奖剩余次数=>抽奖**\n\n上面这个是我随便写的，大概意思是一个抽奖行为是有流程的，虽然只是一个点击按钮其实是有非常多状态的改变的。然后在不同状态下会有不同需要触发的行为，并且它还要改变到下一个状态。\n\n当使用这套逻辑时，整个流程的判断就可以都放到一起，代码会好理解很多，改起来也没那么恶心了。\n\n为啥说伪呢，因为下面这个是一个简陋实现版~~*乞丐版*~~：\n\n```bash\n    const [lotteryState, setLotteryState] = useState<string | undefined>();\n\n    const getState = async () => {\n        switch (lotteryState) {\n            case 'start':\n                if (条件1) {\n                    setLotteryState('状态A');\n                } else {\n                    store.reducers.doActionEnd;\n                    setLotteryState('end');\n                }\n                break;\n            case '状态A':\n                if (条件2) {\n                    store.reducers.doAction111;\n                    setLotteryState('状态B');\n                } else {\n                    store.reducers.doAction222;\n                    setLotteryState('状态C');\n                }\n                break;\n            case '状态B':\n                if (条件3) {\n                    store.reducers.doAction444;\n                    setLotteryState('状态C');\n                } else {\n                    store.reducers.doActionEnd;\n                    setLotteryState('end');\n                }\n                break;\n            case '状态C':\n                if (条件4) {\n                    store.reducers.doAction555;\n                    setLotteryState('end');\n                } else {\n                    store.reducers.doActionEnd;\n                    setLotteryState('end');\n                }\n                break;\n            case 'end':\n                break;\n            default:\n                break;\n            }\n    }\n\n    const lottery = async () => {\n        setLotteryState('start');\n    };\n\n    return (\n        <img onClick={lottery}/>\n    );\n```","slug":"可配置抽奖转盘遇到的一些坑和处理方法","published":1,"updated":"2021-08-02T17:29:31.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks69zwtv00086bt6fx92alor","content":"<p>前阵子因为需求改动，把之前写过的可配置抽奖转盘的抽奖判断逻辑重写了一遍，还解决了一个兼容性问题，简单记录下。</p>\n<p><strong>目录</strong><br>    <strong><a href=\"#111\">一、setTimeout制作动画在Safari中掉帧</a></strong><br>    <strong><a href=\"#222\">二、用状态机（伪）管理不同抽奖逻辑</a></strong></p>\n<br/>\n\n<p><strong><p id=\"111\">一、setTimeout制作动画在Safari中掉帧</p></strong></p>\n<p>代码的实现逻辑是使用canvas根据奖品数量动态绘制转盘角度生成静止的一帧，然后使用定时器修改绘制的起始角度，每隔一段时间重绘一张转盘实现动画效果。</p>\n<p>问题出在最开始是使用setTimeout实现这个定时绘制的功能，但是转动效果在苹果手机上非常糟糕，掉帧极其严重。在微信开发者工具上也复现不出问题，就猜测是Safari的兼容性问题,发现setTimeout和setInterval在Safari上的兼容性不大好。在同事的提示下换成了requestAnimationFrame，动画就流畅了很多。</p>\n<p>至于原因懒得再总结了，我觉得这个人讲的很清楚。<a href=\"https://blog.csdn.net/weixin_30312557/article/details/100093720\">requestAnimationFram和setTimeout执行的先后</a></p>\n<blockquote>\n<ul>\n<li>requestAnimationFrame 执行步伐跟着系统的绘制频率走，就是说屏幕分辨率 和 屏幕尺寸会影响requestAnimationFrame的回调函数执行时间。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>setTimeout 执行只是在内存中通过设置一个间隔时间来运行代码，HTML5标准规定了setTimeout()的第二个参数的最小值（最短间隔），不得低于4毫秒，如果低于这个值，就会自动增加。在此之前，老版本的浏览器都将最短间隔设为10毫秒。另外，对于那些DOM的变动（尤其是涉及页面重新渲染的部分），通常不会立即执行，而是每16毫秒执行一次。同时setTimeout 任务被放进了异步队列中，只有当主线程上的任务执行完以后，才会去检查该队列里的任务是否需要开始执行，所以 setTimeout 的实际执行时机一般要比其设定的时间晚一些。</li>\n</ul>\n</blockquote>\n<p>两者执行的快慢影响因素：</p>\n<blockquote>\n<ul>\n<li>requestAnimationFrame受系统的绘制频率影响，即屏幕分辨率 和 屏幕尺寸</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>setTimeout 受任务队列和页面渲染有关</li>\n</ul>\n</blockquote>\n<p>比较麻烦的点在于动画逻辑需要修改，大概修改如下。</p>\n<p>使用setTimeout的大概写法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const interval = 10;</span><br><span class=\"line\">const result = <span class=\"string\">&quot;一等奖&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"built_in\">let</span> i = 1; i &lt; condition; i += 1) &#123;</span><br><span class=\"line\">    const timeId = setTimeout(() =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      // 一些需要循环的操作</span><br><span class=\"line\">      setStart(interval * i);</span><br><span class=\"line\"></span><br><span class=\"line\">      // 满足停止条件时结束，没错这动画我居然包了层promise写</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i === condition) &#123;</span><br><span class=\"line\">        resolve(result);</span><br><span class=\"line\">        clearTimeout(timeId);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, 100);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用requestAnimationFrame的大概写法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const interval = 10;</span><br><span class=\"line\">const result = <span class=\"string\">&quot;一等奖&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> i = 1;</span><br><span class=\"line\">// 回调函数</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">animloop</span></span>() &#123;</span><br><span class=\"line\">    i += 1;</span><br><span class=\"line\">    // 一些需要循环的操作</span><br><span class=\"line\">    setStart(interval * i);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 在没有满足条件前递归</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; condition) &#123;</span><br><span class=\"line\">        window.requestAnimationFrame(animloop);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 满足停止条件时结束</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === condition) &#123;</span><br><span class=\"line\">        resolve(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 第一帧渲染</span><br><span class=\"line\">window.requestAnimationFrame(animloop);</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p><strong><p id=\"222\">二、用状态机（伪）管理不同抽奖逻辑</p></strong></p>\n<p>因为这是个可配置的抽奖活动，导致灵活度非常高。点击抽奖按钮之后需要做的条件判断非常之多，而且因为可配置的原因也非常复杂.再加上需求的变化，原本分散在不同组件中的判断逻辑需要整合到一个按钮上，于是就干脆重写了判断逻辑。</p>\n<p>比如点击抽奖按钮之后，需要查看用户的抽奖次数、信息填写情况、配置填写用户信息的时机、活动时间等等等。</p>\n<p>原先的做法是在不同组件内进行判断，并将不同判断结果发到一个中心化的数据中心管理，再在不同需要判断的地方调用这些结果进行一层一层判断。这样写的麻烦之处在于有很多条件的判断是耦合的，不是很好拆，而且如果需求一改动，在耦合的判断逻辑下（而且还是不同组件），改起来很恶心。<del>虽然主要原因还是我原先代码写的太烂了。</del></p>\n<p>后来想起来隔壁后端同事之前在搞可配置的发布流程管理，这一层层的条件逻辑判断以及状态改变达到不同页面（对抽奖而言就是不同提示），似乎有点眼熟。记得之前听到测试妹子说是用有限状态机写的，于是走投无路（并没有）的我研究了起状态机。</p>\n<p>鉴于我很懒，只摘录了我觉得比较有用的概念。</p>\n<blockquote>\n<ul>\n<li>第一个是 State ，状态。一个状态机至少要包含两个状态。例如上面自动门的例子，有 open 和 closed 两个状态。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>第二个是 Event ，事件。事件就是执行某个操作的触发条件或者口令。对于自动门，“按下开门按钮”就是一个事件。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>第三个是 Action ，动作。事件发生以后要执行动作。例如事件是“按开门按钮”，动作是“开门”。编程的时候，一个 Action 一般就对应一个函数。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>第四个是 Transition ，变换。也就是从一个状态变化为另一个状态。例如“开门过程”就是一个变换。</li>\n</ul>\n</blockquote>\n<p><strong>比如抽奖流程：点击开始抽奖=&gt;验证身份=&gt;验证活动时间=&gt;验证抽奖剩余次数=&gt;抽奖</strong></p>\n<p>上面这个是我随便写的，大概意思是一个抽奖行为是有流程的，虽然只是一个点击按钮其实是有非常多状态的改变的。然后在不同状态下会有不同需要触发的行为，并且它还要改变到下一个状态。</p>\n<p>当使用这套逻辑时，整个流程的判断就可以都放到一起，代码会好理解很多，改起来也没那么恶心了。</p>\n<p>为啥说伪呢，因为下面这个是一个简陋实现版<del><em>乞丐版</em></del>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [lotteryState, setLotteryState] = useState&lt;string | undefined&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">const getState = async () =&gt; &#123;</span><br><span class=\"line\">    switch (lotteryState) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;start&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (条件1) &#123;</span><br><span class=\"line\">                setLotteryState(<span class=\"string\">&#x27;状态A&#x27;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                store.reducers.doActionEnd;</span><br><span class=\"line\">                setLotteryState(<span class=\"string\">&#x27;end&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;状态A&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (条件2) &#123;</span><br><span class=\"line\">                store.reducers.doAction111;</span><br><span class=\"line\">                setLotteryState(<span class=\"string\">&#x27;状态B&#x27;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                store.reducers.doAction222;</span><br><span class=\"line\">                setLotteryState(<span class=\"string\">&#x27;状态C&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;状态B&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (条件3) &#123;</span><br><span class=\"line\">                store.reducers.doAction444;</span><br><span class=\"line\">                setLotteryState(<span class=\"string\">&#x27;状态C&#x27;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                store.reducers.doActionEnd;</span><br><span class=\"line\">                setLotteryState(<span class=\"string\">&#x27;end&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;状态C&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (条件4) &#123;</span><br><span class=\"line\">                store.reducers.doAction555;</span><br><span class=\"line\">                setLotteryState(<span class=\"string\">&#x27;end&#x27;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                store.reducers.doActionEnd;</span><br><span class=\"line\">                setLotteryState(<span class=\"string\">&#x27;end&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;end&#x27;</span>:</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const lottery = async () =&gt; &#123;</span><br><span class=\"line\">    setLotteryState(<span class=\"string\">&#x27;start&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">return</span> (</span><br><span class=\"line\">    &lt;img onClick=&#123;lottery&#125;/&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>","site":{"data":{"styles":".fa-bilibili {\n  background: url(\"/images/bilibili-fill.svg\");\n  background-position: 50% 260%;\n  background-repeat: no-repeat;\n  height: 1rem;\n  width: 1rem;\n}\n"}},"excerpt":"","more":"<p>前阵子因为需求改动，把之前写过的可配置抽奖转盘的抽奖判断逻辑重写了一遍，还解决了一个兼容性问题，简单记录下。</p>\n<p><strong>目录</strong><br>    <strong><a href=\"#111\">一、setTimeout制作动画在Safari中掉帧</a></strong><br>    <strong><a href=\"#222\">二、用状态机（伪）管理不同抽奖逻辑</a></strong></p>\n<br/>\n\n<p><strong><p id=\"111\">一、setTimeout制作动画在Safari中掉帧</p></strong></p>\n<p>代码的实现逻辑是使用canvas根据奖品数量动态绘制转盘角度生成静止的一帧，然后使用定时器修改绘制的起始角度，每隔一段时间重绘一张转盘实现动画效果。</p>\n<p>问题出在最开始是使用setTimeout实现这个定时绘制的功能，但是转动效果在苹果手机上非常糟糕，掉帧极其严重。在微信开发者工具上也复现不出问题，就猜测是Safari的兼容性问题,发现setTimeout和setInterval在Safari上的兼容性不大好。在同事的提示下换成了requestAnimationFrame，动画就流畅了很多。</p>\n<p>至于原因懒得再总结了，我觉得这个人讲的很清楚。<a href=\"https://blog.csdn.net/weixin_30312557/article/details/100093720\">requestAnimationFram和setTimeout执行的先后</a></p>\n<blockquote>\n<ul>\n<li>requestAnimationFrame 执行步伐跟着系统的绘制频率走，就是说屏幕分辨率 和 屏幕尺寸会影响requestAnimationFrame的回调函数执行时间。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>setTimeout 执行只是在内存中通过设置一个间隔时间来运行代码，HTML5标准规定了setTimeout()的第二个参数的最小值（最短间隔），不得低于4毫秒，如果低于这个值，就会自动增加。在此之前，老版本的浏览器都将最短间隔设为10毫秒。另外，对于那些DOM的变动（尤其是涉及页面重新渲染的部分），通常不会立即执行，而是每16毫秒执行一次。同时setTimeout 任务被放进了异步队列中，只有当主线程上的任务执行完以后，才会去检查该队列里的任务是否需要开始执行，所以 setTimeout 的实际执行时机一般要比其设定的时间晚一些。</li>\n</ul>\n</blockquote>\n<p>两者执行的快慢影响因素：</p>\n<blockquote>\n<ul>\n<li>requestAnimationFrame受系统的绘制频率影响，即屏幕分辨率 和 屏幕尺寸</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>setTimeout 受任务队列和页面渲染有关</li>\n</ul>\n</blockquote>\n<p>比较麻烦的点在于动画逻辑需要修改，大概修改如下。</p>\n<p>使用setTimeout的大概写法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const interval = 10;</span><br><span class=\"line\">const result = <span class=\"string\">&quot;一等奖&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"built_in\">let</span> i = 1; i &lt; condition; i += 1) &#123;</span><br><span class=\"line\">    const timeId = setTimeout(() =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      // 一些需要循环的操作</span><br><span class=\"line\">      setStart(interval * i);</span><br><span class=\"line\"></span><br><span class=\"line\">      // 满足停止条件时结束，没错这动画我居然包了层promise写</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i === condition) &#123;</span><br><span class=\"line\">        resolve(result);</span><br><span class=\"line\">        clearTimeout(timeId);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, 100);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用requestAnimationFrame的大概写法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const interval = 10;</span><br><span class=\"line\">const result = <span class=\"string\">&quot;一等奖&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> i = 1;</span><br><span class=\"line\">// 回调函数</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">animloop</span></span>() &#123;</span><br><span class=\"line\">    i += 1;</span><br><span class=\"line\">    // 一些需要循环的操作</span><br><span class=\"line\">    setStart(interval * i);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 在没有满足条件前递归</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; condition) &#123;</span><br><span class=\"line\">        window.requestAnimationFrame(animloop);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 满足停止条件时结束</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === condition) &#123;</span><br><span class=\"line\">        resolve(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 第一帧渲染</span><br><span class=\"line\">window.requestAnimationFrame(animloop);</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p><strong><p id=\"222\">二、用状态机（伪）管理不同抽奖逻辑</p></strong></p>\n<p>因为这是个可配置的抽奖活动，导致灵活度非常高。点击抽奖按钮之后需要做的条件判断非常之多，而且因为可配置的原因也非常复杂.再加上需求的变化，原本分散在不同组件中的判断逻辑需要整合到一个按钮上，于是就干脆重写了判断逻辑。</p>\n<p>比如点击抽奖按钮之后，需要查看用户的抽奖次数、信息填写情况、配置填写用户信息的时机、活动时间等等等。</p>\n<p>原先的做法是在不同组件内进行判断，并将不同判断结果发到一个中心化的数据中心管理，再在不同需要判断的地方调用这些结果进行一层一层判断。这样写的麻烦之处在于有很多条件的判断是耦合的，不是很好拆，而且如果需求一改动，在耦合的判断逻辑下（而且还是不同组件），改起来很恶心。<del>虽然主要原因还是我原先代码写的太烂了。</del></p>\n<p>后来想起来隔壁后端同事之前在搞可配置的发布流程管理，这一层层的条件逻辑判断以及状态改变达到不同页面（对抽奖而言就是不同提示），似乎有点眼熟。记得之前听到测试妹子说是用有限状态机写的，于是走投无路（并没有）的我研究了起状态机。</p>\n<p>鉴于我很懒，只摘录了我觉得比较有用的概念。</p>\n<blockquote>\n<ul>\n<li>第一个是 State ，状态。一个状态机至少要包含两个状态。例如上面自动门的例子，有 open 和 closed 两个状态。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>第二个是 Event ，事件。事件就是执行某个操作的触发条件或者口令。对于自动门，“按下开门按钮”就是一个事件。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>第三个是 Action ，动作。事件发生以后要执行动作。例如事件是“按开门按钮”，动作是“开门”。编程的时候，一个 Action 一般就对应一个函数。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>第四个是 Transition ，变换。也就是从一个状态变化为另一个状态。例如“开门过程”就是一个变换。</li>\n</ul>\n</blockquote>\n<p><strong>比如抽奖流程：点击开始抽奖=&gt;验证身份=&gt;验证活动时间=&gt;验证抽奖剩余次数=&gt;抽奖</strong></p>\n<p>上面这个是我随便写的，大概意思是一个抽奖行为是有流程的，虽然只是一个点击按钮其实是有非常多状态的改变的。然后在不同状态下会有不同需要触发的行为，并且它还要改变到下一个状态。</p>\n<p>当使用这套逻辑时，整个流程的判断就可以都放到一起，代码会好理解很多，改起来也没那么恶心了。</p>\n<p>为啥说伪呢，因为下面这个是一个简陋实现版<del><em>乞丐版</em></del>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [lotteryState, setLotteryState] = useState&lt;string | undefined&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">const getState = async () =&gt; &#123;</span><br><span class=\"line\">    switch (lotteryState) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;start&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (条件1) &#123;</span><br><span class=\"line\">                setLotteryState(<span class=\"string\">&#x27;状态A&#x27;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                store.reducers.doActionEnd;</span><br><span class=\"line\">                setLotteryState(<span class=\"string\">&#x27;end&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;状态A&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (条件2) &#123;</span><br><span class=\"line\">                store.reducers.doAction111;</span><br><span class=\"line\">                setLotteryState(<span class=\"string\">&#x27;状态B&#x27;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                store.reducers.doAction222;</span><br><span class=\"line\">                setLotteryState(<span class=\"string\">&#x27;状态C&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;状态B&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (条件3) &#123;</span><br><span class=\"line\">                store.reducers.doAction444;</span><br><span class=\"line\">                setLotteryState(<span class=\"string\">&#x27;状态C&#x27;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                store.reducers.doActionEnd;</span><br><span class=\"line\">                setLotteryState(<span class=\"string\">&#x27;end&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;状态C&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (条件4) &#123;</span><br><span class=\"line\">                store.reducers.doAction555;</span><br><span class=\"line\">                setLotteryState(<span class=\"string\">&#x27;end&#x27;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                store.reducers.doActionEnd;</span><br><span class=\"line\">                setLotteryState(<span class=\"string\">&#x27;end&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;end&#x27;</span>:</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const lottery = async () =&gt; &#123;</span><br><span class=\"line\">    setLotteryState(<span class=\"string\">&#x27;start&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">return</span> (</span><br><span class=\"line\">    &lt;img onClick=&#123;lottery&#125;/&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>"},{"title":"记录一些git好用操作","date":"2021-09-09T15:05:24.000Z","_content":"\n因为好久没写了，又懒得动脑子写新东西，就打算整理一些工作中常用的git命令。\n其实也是因为9月就要过去了，但我啥文章也没写过。。。\n\n&emsp;\n**<h1 id=\"menu-git\">目录</h1>** \n    **[1.清空所有没有加入暂存区的修改](#git1)**\n    **[2.清空已经加入暂存区的修改](#git2)**\n    **[3.改东西改到一半临时切分支](#git3)**\n    **[4.配置命令行代理](#git4)**\n    **[5.有几个分支，只想合并某个commit](#git5)**\n    **[6.拉取本地没有的远程分支](#git6)**\n    **[7.将本地某分支强推到到远程另外一个指定分支](#git7)**\n    **[8.本地切来切去干了一堆无用功想撤回](#git8)**\n    **[9.我只想回滚某个文件](#git9)**\n    **[10.虽然没有冲突，但我想手动合](#git10)**\n    **[11.git的global config不小心设置了两个相同的key，想删删不掉](#git11)**\n<br/>\n\n**<p id=\"git1\">1.清空所有没有加入暂存区的修改</p>** \n\n一般可以用`git checkout .`作为后悔药，但是如果有新增或删除文件就需要下面这个命令了。\n\n可以放弃所有修改、新增、删除文件\n\n```bash\n    git checkout . && git clean -df\n```\n**[回到目录](#menu-git)**\n&emsp;\n**<p id=\"git2\">2.清空已经加入暂存区的修改</p>** \n\n如果已经不小心用了`git add .`把修改加入了暂存区，但是又中途不想要这个修改了，可以如下操作。\n这个做法可能比较邪道，但是能用。\n\n```bash\n    git add .\n    git stash\n```\n\n至于有没有强迫症，要不要删掉这个stash的内容就看自己习惯了。\n**[回到目录](#menu-git)**\n&emsp;\n**<p id=\"git3\">3.改东西改到一半临时切分支</p>** \n\n经常遇到在某个功能分支上开发到一半被临时叫去主分支修bug，代码写了一半又因为各种原因不想提交，就可以用下面的命令暂存修改。\n\n首先在当前分支输入如下命令暂存修改\n```bash\n    git add .\n    git stash\n```\n\n然后切出去改东西，等全部操作完了再切到要把暂存内容放出来的分支，使用如下命令把暂存的东西放出来。\n```bash\n    git stash pop\n```\n\n需要注意的是，用stash存的一个个内容可以理解成一个栈，先进后出。\n\n也就是说，如果有多个分支都做了stash这个操作来暂存内容，那么你直接使用`git stash pop`放出暂存内容的时候，遵循先进后出的规则，放出的一定是你最后那次暂存的东西，而且也会自动从这个暂存栈删除这次暂存。但有的时候我们又希望跳着来。就可以用下面这个命令先查看这个暂存栈里的暂存记录。\n\n```bash\n    git stash list\n\n    stash@{0}: WIP on branch1: ffb8e1b Merge pull request #202 from branch2\n    stash@{1}: WIP on branch2: fc36bd0 Merge pull request #171 from branch\n    stash@{2}: WIP on branch3: 404474c commit message\n```\n\n根据提示内容找到想要放出的暂存记录，使用如下命令放出暂存，不过使用下面这个命令是不会从暂存栈删除这条暂存记录的。\n\n```bash\n    git stash apply stash@{1}\n```\n**[回到目录](#menu-git)**\n&emsp;\n**<p id=\"git4\">4.配置命令行代理</p>** \n\n其实这个命令自从github版本更新以后已经没什么意义了但是还是写下。\n\n由于众所周知的原因，在国内如果是使用https的地址来git clone仓库到本地，比如这种地址`https://github.com/用户名/仓库名.git`，那么在使用git push时经常会遇到网络问题。\n以前用windows系统的时候把代理配置手动改成全局就可以了，但是换了mac之后好像没啥用。后来才知道mac的命令行需要另外配置代理命令才能走代理push。实际的端口号需要找自己的ssr配置来看。我这个应该算是比较常见的配置。命令行回车一下再push就畅通无阻了。\n\n```bash\n    export http_proxy=socks5://127.0.0.1:1086;\n    export https_proxy=socks5://127.0.0.1:1086;\n```\n\n但是这个命令自从上次github更新之后就没意义了，gayhub现在为了安全问题好像需要配置一堆东西才能使用https来push代码，因为我过于讨厌配置这件事，就直接把https改成ssh了。~~早知今日何必当初~~\n\n下面这个是把原本的https换成ssh的命令。\n\n```bash\n    git remote set-url origin （ssh-url）\n```\n**[回到目录](#menu-git)**\n&emsp;\n**<p id=\"git5\">5.有几个分支，只想合并某个commit</p>** \n实际场景中经常有基于某个分支开出的不同分支来应付不同项目的需求，有时候某个分支上更新的某个功能另外一个分支也需要，并且不希望吧这个分支上除了新功能以外的内容合过去，这个时候就可以用cherry-pick提交某个指定的commit。\n\n```bash\n    git cherry-pick  要合过来的分支名 \n    //写分支名会合并这个分支最新的一次commit\n    //也可以写某个commit的hash值，如果是commit的hash值那么只会合并这个指定的commit\n    git log //可以用来查看当前分支的commit历史，用来查询commit的hash值\n```\n\n如果cherry-pick遇到了冲突\n\n```bash\n    // 先修改冲突\n    git status //查看修改\n    git add . //添加修改\n    git cherry-pick --continue //继续cherry-pick\n```\n**[回到目录](#menu-git)**\n&emsp;\n**<p id=\"git6\">6.拉取本地没有的远程分支</p>** \n经常有多人同时开发，然后需要拉取别人已经提交的开发好的分支进行修改。\n\n需要先`git fetch --all`拉取远程所有分支。\n然后使用`git checkout 要拉取的分支名`切到想拉的分支上，这时候本地已经是远程的那个分支了。\n\n~~我怎么越写越敷衍了~~\n&emsp;\n**<p id=\"git7\">7.将本地某分支强推到到远程另外一个指定分支</p>** \n当各种奇怪操作导致了无可救药的问题时，就只能强推了。\n\n一般情况下分支之间不会有太大不同，可以把本地能用的分支强推到线上的这个分支上，再用pr抢救下。但。。。架不住妖魔鬼怪的操作导致主分支完全不想要了，这个时候可以偷懒的用以下这个危险操作。\n\n```bash\n    git push origin 本地分支名:想推送的远程分支名 -f \n```\n**[回到目录](#menu-git)**\n&emsp;\n**<p id=\"git8\">8.本地切来切去干了一堆无用功想撤回</p>** \n输入`git reflog`查看时间顺序下的所有操作,大概长下面这样\n```bash\n    1a8bebe (HEAD -> develop, origin/develop) HEAD@{0}: commit: fix: 🐛 change avatar\n    a09ce5a HEAD@{1}: commit: feat: 🎸 add something\n    f6b66b7 HEAD@{2}: commit: fix: 🎸 fix bug\n```\n找到想要回滚的时间点，比如我想回到`commit: feat: 🎸 add something`这个commit,对应的是`HEAD@{1}` \n```bash\n    git reset --hard HEAD@{1}\n```\n这个时候所有的内容都会彻底回到这个commit的版本，新发生的变更将会丢失。需要注意的是，回滚的版本只能是已经提交了commit，如果啥也没提交，那reflog后啥也没有，那你也回不去了。所以记得勤提交。\n\n这个操作配合`git push origin 想回滚的分支名 -f`就可以实现远程分支的回滚。\n\n不过hard还是要慎用，虽然后悔药有用，但是你放弃的那些commit也不见了。~~就像脑子里进的那些水~~\n**[回到目录](#menu-git)**\n&emsp;\n**<p id=\"git9\">9.我只想回滚某个文件</p>** \n这个也挺常见的，有时候改了一大堆，发现某个文件的某个版本才是对的，就只想回滚这个文件。\n首先找到正确版本的文件所在的commit的hash值。\n```bash\n    git log ./README.md //想修改的文件路径\n    \n    commit hash值1 (HEAD -> develop)\n    Merge: 12857b7 8fc2e03\n    Author: icey0126 \n    Date:   Tue Jun 29 16:01:41 2021 +0800\n\n        fix: 🐛 fix bug\n\n    commit hash值2\n    Author: icey0126 \n    Date:   Tue Jun 29 15:55:41 2021 +0800\n\n        fix: 🐛 fix bug2\n```\n找到了`fix bug2`这个commit的hash值。\n\n```bash\n    git checkout hash值2 ./README.md //利用hash回滚特定文件，注意，这里为了方便操作，使用hash的前六位就可以\n```\n\n回滚后注意需要提交。\n```bash\n    git commit -m '回滚README.md' \n```\n**[回到目录](#menu-git)**\n&emsp;\n**<p id=\"git10\">10.虽然没有冲突，但我想手动合</p>** \n怎么会有这么奇怪的要求。~~还真有~~\n在某个开发分支，想合并主分支时，虽然并没有冲突，但是想手动确认修改。可以配置如下命令。\n\n```bash\n    git merge --no-commit --no-ff 要合进来的分支名\n```\n但这个命令有时候会不生效，我也不知道原因。~~我只是想凑个10~~\n**[回到目录](#menu-git)**\n&emsp;\n**<p id=\"git11\">11.git的global config不小心设置了两个相同的key，想删删不掉</p>** \n突然想起来的一个比较常见的问题，有时候用`git config --global key value`设置全局配置时会不小心给同一个key设置了不同的value。\n\n本来吧，用`git config --global --unset key`就可以删掉这个全局配置了，但是出现了同一个key多个value的时候就会报错不让你这么操作。\n\n先用`git config --global -l`看看自己做了什么（看看全局配置了配了哪些参数）。\n\n然后可以用正规的办法删掉这个key对应的所有value\n```bash\n    git config --unset -all key\n```\n\n或者用不正规的办法，把这个key对应的值全部替换成我们设定的值。\n```bash\n    git config --global --replace-all key \"随便给个value\"\n```\n\n由于git config的机制，只会保留一个相同的键值对，就可以通过正常的删除单个的操作来删除了。\n**[回到目录](#menu-git)**","source":"_posts/记录一些git的好用操作.md","raw":"---\ntitle: 记录一些git好用操作\ndate: 2021-09-09 23:05:24\ntags: \n- git\ncategories: \n- CS\n- 杂\n---\n\n因为好久没写了，又懒得动脑子写新东西，就打算整理一些工作中常用的git命令。\n其实也是因为9月就要过去了，但我啥文章也没写过。。。\n\n&emsp;\n**<h1 id=\"menu-git\">目录</h1>** \n    **[1.清空所有没有加入暂存区的修改](#git1)**\n    **[2.清空已经加入暂存区的修改](#git2)**\n    **[3.改东西改到一半临时切分支](#git3)**\n    **[4.配置命令行代理](#git4)**\n    **[5.有几个分支，只想合并某个commit](#git5)**\n    **[6.拉取本地没有的远程分支](#git6)**\n    **[7.将本地某分支强推到到远程另外一个指定分支](#git7)**\n    **[8.本地切来切去干了一堆无用功想撤回](#git8)**\n    **[9.我只想回滚某个文件](#git9)**\n    **[10.虽然没有冲突，但我想手动合](#git10)**\n    **[11.git的global config不小心设置了两个相同的key，想删删不掉](#git11)**\n<br/>\n\n**<p id=\"git1\">1.清空所有没有加入暂存区的修改</p>** \n\n一般可以用`git checkout .`作为后悔药，但是如果有新增或删除文件就需要下面这个命令了。\n\n可以放弃所有修改、新增、删除文件\n\n```bash\n    git checkout . && git clean -df\n```\n**[回到目录](#menu-git)**\n&emsp;\n**<p id=\"git2\">2.清空已经加入暂存区的修改</p>** \n\n如果已经不小心用了`git add .`把修改加入了暂存区，但是又中途不想要这个修改了，可以如下操作。\n这个做法可能比较邪道，但是能用。\n\n```bash\n    git add .\n    git stash\n```\n\n至于有没有强迫症，要不要删掉这个stash的内容就看自己习惯了。\n**[回到目录](#menu-git)**\n&emsp;\n**<p id=\"git3\">3.改东西改到一半临时切分支</p>** \n\n经常遇到在某个功能分支上开发到一半被临时叫去主分支修bug，代码写了一半又因为各种原因不想提交，就可以用下面的命令暂存修改。\n\n首先在当前分支输入如下命令暂存修改\n```bash\n    git add .\n    git stash\n```\n\n然后切出去改东西，等全部操作完了再切到要把暂存内容放出来的分支，使用如下命令把暂存的东西放出来。\n```bash\n    git stash pop\n```\n\n需要注意的是，用stash存的一个个内容可以理解成一个栈，先进后出。\n\n也就是说，如果有多个分支都做了stash这个操作来暂存内容，那么你直接使用`git stash pop`放出暂存内容的时候，遵循先进后出的规则，放出的一定是你最后那次暂存的东西，而且也会自动从这个暂存栈删除这次暂存。但有的时候我们又希望跳着来。就可以用下面这个命令先查看这个暂存栈里的暂存记录。\n\n```bash\n    git stash list\n\n    stash@{0}: WIP on branch1: ffb8e1b Merge pull request #202 from branch2\n    stash@{1}: WIP on branch2: fc36bd0 Merge pull request #171 from branch\n    stash@{2}: WIP on branch3: 404474c commit message\n```\n\n根据提示内容找到想要放出的暂存记录，使用如下命令放出暂存，不过使用下面这个命令是不会从暂存栈删除这条暂存记录的。\n\n```bash\n    git stash apply stash@{1}\n```\n**[回到目录](#menu-git)**\n&emsp;\n**<p id=\"git4\">4.配置命令行代理</p>** \n\n其实这个命令自从github版本更新以后已经没什么意义了但是还是写下。\n\n由于众所周知的原因，在国内如果是使用https的地址来git clone仓库到本地，比如这种地址`https://github.com/用户名/仓库名.git`，那么在使用git push时经常会遇到网络问题。\n以前用windows系统的时候把代理配置手动改成全局就可以了，但是换了mac之后好像没啥用。后来才知道mac的命令行需要另外配置代理命令才能走代理push。实际的端口号需要找自己的ssr配置来看。我这个应该算是比较常见的配置。命令行回车一下再push就畅通无阻了。\n\n```bash\n    export http_proxy=socks5://127.0.0.1:1086;\n    export https_proxy=socks5://127.0.0.1:1086;\n```\n\n但是这个命令自从上次github更新之后就没意义了，gayhub现在为了安全问题好像需要配置一堆东西才能使用https来push代码，因为我过于讨厌配置这件事，就直接把https改成ssh了。~~早知今日何必当初~~\n\n下面这个是把原本的https换成ssh的命令。\n\n```bash\n    git remote set-url origin （ssh-url）\n```\n**[回到目录](#menu-git)**\n&emsp;\n**<p id=\"git5\">5.有几个分支，只想合并某个commit</p>** \n实际场景中经常有基于某个分支开出的不同分支来应付不同项目的需求，有时候某个分支上更新的某个功能另外一个分支也需要，并且不希望吧这个分支上除了新功能以外的内容合过去，这个时候就可以用cherry-pick提交某个指定的commit。\n\n```bash\n    git cherry-pick  要合过来的分支名 \n    //写分支名会合并这个分支最新的一次commit\n    //也可以写某个commit的hash值，如果是commit的hash值那么只会合并这个指定的commit\n    git log //可以用来查看当前分支的commit历史，用来查询commit的hash值\n```\n\n如果cherry-pick遇到了冲突\n\n```bash\n    // 先修改冲突\n    git status //查看修改\n    git add . //添加修改\n    git cherry-pick --continue //继续cherry-pick\n```\n**[回到目录](#menu-git)**\n&emsp;\n**<p id=\"git6\">6.拉取本地没有的远程分支</p>** \n经常有多人同时开发，然后需要拉取别人已经提交的开发好的分支进行修改。\n\n需要先`git fetch --all`拉取远程所有分支。\n然后使用`git checkout 要拉取的分支名`切到想拉的分支上，这时候本地已经是远程的那个分支了。\n\n~~我怎么越写越敷衍了~~\n&emsp;\n**<p id=\"git7\">7.将本地某分支强推到到远程另外一个指定分支</p>** \n当各种奇怪操作导致了无可救药的问题时，就只能强推了。\n\n一般情况下分支之间不会有太大不同，可以把本地能用的分支强推到线上的这个分支上，再用pr抢救下。但。。。架不住妖魔鬼怪的操作导致主分支完全不想要了，这个时候可以偷懒的用以下这个危险操作。\n\n```bash\n    git push origin 本地分支名:想推送的远程分支名 -f \n```\n**[回到目录](#menu-git)**\n&emsp;\n**<p id=\"git8\">8.本地切来切去干了一堆无用功想撤回</p>** \n输入`git reflog`查看时间顺序下的所有操作,大概长下面这样\n```bash\n    1a8bebe (HEAD -> develop, origin/develop) HEAD@{0}: commit: fix: 🐛 change avatar\n    a09ce5a HEAD@{1}: commit: feat: 🎸 add something\n    f6b66b7 HEAD@{2}: commit: fix: 🎸 fix bug\n```\n找到想要回滚的时间点，比如我想回到`commit: feat: 🎸 add something`这个commit,对应的是`HEAD@{1}` \n```bash\n    git reset --hard HEAD@{1}\n```\n这个时候所有的内容都会彻底回到这个commit的版本，新发生的变更将会丢失。需要注意的是，回滚的版本只能是已经提交了commit，如果啥也没提交，那reflog后啥也没有，那你也回不去了。所以记得勤提交。\n\n这个操作配合`git push origin 想回滚的分支名 -f`就可以实现远程分支的回滚。\n\n不过hard还是要慎用，虽然后悔药有用，但是你放弃的那些commit也不见了。~~就像脑子里进的那些水~~\n**[回到目录](#menu-git)**\n&emsp;\n**<p id=\"git9\">9.我只想回滚某个文件</p>** \n这个也挺常见的，有时候改了一大堆，发现某个文件的某个版本才是对的，就只想回滚这个文件。\n首先找到正确版本的文件所在的commit的hash值。\n```bash\n    git log ./README.md //想修改的文件路径\n    \n    commit hash值1 (HEAD -> develop)\n    Merge: 12857b7 8fc2e03\n    Author: icey0126 \n    Date:   Tue Jun 29 16:01:41 2021 +0800\n\n        fix: 🐛 fix bug\n\n    commit hash值2\n    Author: icey0126 \n    Date:   Tue Jun 29 15:55:41 2021 +0800\n\n        fix: 🐛 fix bug2\n```\n找到了`fix bug2`这个commit的hash值。\n\n```bash\n    git checkout hash值2 ./README.md //利用hash回滚特定文件，注意，这里为了方便操作，使用hash的前六位就可以\n```\n\n回滚后注意需要提交。\n```bash\n    git commit -m '回滚README.md' \n```\n**[回到目录](#menu-git)**\n&emsp;\n**<p id=\"git10\">10.虽然没有冲突，但我想手动合</p>** \n怎么会有这么奇怪的要求。~~还真有~~\n在某个开发分支，想合并主分支时，虽然并没有冲突，但是想手动确认修改。可以配置如下命令。\n\n```bash\n    git merge --no-commit --no-ff 要合进来的分支名\n```\n但这个命令有时候会不生效，我也不知道原因。~~我只是想凑个10~~\n**[回到目录](#menu-git)**\n&emsp;\n**<p id=\"git11\">11.git的global config不小心设置了两个相同的key，想删删不掉</p>** \n突然想起来的一个比较常见的问题，有时候用`git config --global key value`设置全局配置时会不小心给同一个key设置了不同的value。\n\n本来吧，用`git config --global --unset key`就可以删掉这个全局配置了，但是出现了同一个key多个value的时候就会报错不让你这么操作。\n\n先用`git config --global -l`看看自己做了什么（看看全局配置了配了哪些参数）。\n\n然后可以用正规的办法删掉这个key对应的所有value\n```bash\n    git config --unset -all key\n```\n\n或者用不正规的办法，把这个key对应的值全部替换成我们设定的值。\n```bash\n    git config --global --replace-all key \"随便给个value\"\n```\n\n由于git config的机制，只会保留一个相同的键值对，就可以通过正常的删除单个的操作来删除了。\n**[回到目录](#menu-git)**","slug":"记录一些git的好用操作","published":1,"updated":"2021-11-20T14:34:13.931Z","_id":"cktd482mk0000rat67f4t8vfb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>因为好久没写了，又懒得动脑子写新东西，就打算整理一些工作中常用的git命令。<br>其实也是因为9月就要过去了，但我啥文章也没写过。。。</p>\n<p>&emsp;<br><strong><h1 id=\"menu-git\">目录</h1></strong><br>    <strong><a href=\"#git1\">1.清空所有没有加入暂存区的修改</a></strong><br>    <strong><a href=\"#git2\">2.清空已经加入暂存区的修改</a></strong><br>    <strong><a href=\"#git3\">3.改东西改到一半临时切分支</a></strong><br>    <strong><a href=\"#git4\">4.配置命令行代理</a></strong><br>    <strong><a href=\"#git5\">5.有几个分支，只想合并某个commit</a></strong><br>    <strong><a href=\"#git6\">6.拉取本地没有的远程分支</a></strong><br>    <strong><a href=\"#git7\">7.将本地某分支强推到到远程另外一个指定分支</a></strong><br>    <strong><a href=\"#git8\">8.本地切来切去干了一堆无用功想撤回</a></strong><br>    <strong><a href=\"#git9\">9.我只想回滚某个文件</a></strong><br>    <strong><a href=\"#git10\">10.虽然没有冲突，但我想手动合</a></strong><br>    <strong><a href=\"#git11\">11.git的global config不小心设置了两个相同的key，想删删不掉</a></strong><br><br/></p>\n<p><strong><p id=\"git1\">1.清空所有没有加入暂存区的修改</p></strong> </p>\n<p>一般可以用<code>git checkout .</code>作为后悔药，但是如果有新增或删除文件就需要下面这个命令了。</p>\n<p>可以放弃所有修改、新增、删除文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout . &amp;&amp; git clean -df</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#menu-git\">回到目录</a></strong><br>&emsp;<br><strong><p id=\"git2\">2.清空已经加入暂存区的修改</p></strong> </p>\n<p>如果已经不小心用了<code>git add .</code>把修改加入了暂存区，但是又中途不想要这个修改了，可以如下操作。<br>这个做法可能比较邪道，但是能用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git stash</span><br></pre></td></tr></table></figure>\n\n<p>至于有没有强迫症，要不要删掉这个stash的内容就看自己习惯了。<br><strong><a href=\"#menu-git\">回到目录</a></strong><br>&emsp;<br><strong><p id=\"git3\">3.改东西改到一半临时切分支</p></strong> </p>\n<p>经常遇到在某个功能分支上开发到一半被临时叫去主分支修bug，代码写了一半又因为各种原因不想提交，就可以用下面的命令暂存修改。</p>\n<p>首先在当前分支输入如下命令暂存修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git stash</span><br></pre></td></tr></table></figure>\n\n<p>然后切出去改东西，等全部操作完了再切到要把暂存内容放出来的分支，使用如下命令把暂存的东西放出来。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，用stash存的一个个内容可以理解成一个栈，先进后出。</p>\n<p>也就是说，如果有多个分支都做了stash这个操作来暂存内容，那么你直接使用<code>git stash pop</code>放出暂存内容的时候，遵循先进后出的规则，放出的一定是你最后那次暂存的东西，而且也会自动从这个暂存栈删除这次暂存。但有的时候我们又希望跳着来。就可以用下面这个命令先查看这个暂存栈里的暂存记录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash list</span><br><span class=\"line\"></span><br><span class=\"line\">stash@&#123;0&#125;: WIP on branch1: ffb8e1b Merge pull request <span class=\"comment\">#202 from branch2</span></span><br><span class=\"line\">stash@&#123;1&#125;: WIP on branch2: fc36bd0 Merge pull request <span class=\"comment\">#171 from branch</span></span><br><span class=\"line\">stash@&#123;2&#125;: WIP on branch3: 404474c commit message</span><br></pre></td></tr></table></figure>\n\n<p>根据提示内容找到想要放出的暂存记录，使用如下命令放出暂存，不过使用下面这个命令是不会从暂存栈删除这条暂存记录的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash apply stash@&#123;1&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#menu-git\">回到目录</a></strong><br>&emsp;<br><strong><p id=\"git4\">4.配置命令行代理</p></strong> </p>\n<p>其实这个命令自从github版本更新以后已经没什么意义了但是还是写下。</p>\n<p>由于众所周知的原因，在国内如果是使用https的地址来git clone仓库到本地，比如这种地址<code>https://github.com/用户名/仓库名.git</code>，那么在使用git push时经常会遇到网络问题。<br>以前用windows系统的时候把代理配置手动改成全局就可以了，但是换了mac之后好像没啥用。后来才知道mac的命令行需要另外配置代理命令才能走代理push。实际的端口号需要找自己的ssr配置来看。我这个应该算是比较常见的配置。命令行回车一下再push就畅通无阻了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> http_proxy=socks5://127.0.0.1:1086;</span><br><span class=\"line\"><span class=\"built_in\">export</span> https_proxy=socks5://127.0.0.1:1086;</span><br></pre></td></tr></table></figure>\n\n<p>但是这个命令自从上次github更新之后就没意义了，gayhub现在为了安全问题好像需要配置一堆东西才能使用https来push代码，因为我过于讨厌配置这件事，就直接把https改成ssh了。<del>早知今日何必当初</del></p>\n<p>下面这个是把原本的https换成ssh的命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin （ssh-url）</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#menu-git\">回到目录</a></strong><br>&emsp;<br><strong><p id=\"git5\">5.有几个分支，只想合并某个commit</p></strong><br>实际场景中经常有基于某个分支开出的不同分支来应付不同项目的需求，有时候某个分支上更新的某个功能另外一个分支也需要，并且不希望吧这个分支上除了新功能以外的内容合过去，这个时候就可以用cherry-pick提交某个指定的commit。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry-pick  要合过来的分支名 </span><br><span class=\"line\">//写分支名会合并这个分支最新的一次commit</span><br><span class=\"line\">//也可以写某个commit的<span class=\"built_in\">hash</span>值，如果是commit的<span class=\"built_in\">hash</span>值那么只会合并这个指定的commit</span><br><span class=\"line\">git <span class=\"built_in\">log</span> //可以用来查看当前分支的commit历史，用来查询commit的<span class=\"built_in\">hash</span>值</span><br></pre></td></tr></table></figure>\n\n<p>如果cherry-pick遇到了冲突</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 先修改冲突</span><br><span class=\"line\">git status //查看修改</span><br><span class=\"line\">git add . //添加修改</span><br><span class=\"line\">git cherry-pick --<span class=\"built_in\">continue</span> //继续cherry-pick</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#menu-git\">回到目录</a></strong><br>&emsp;<br><strong><p id=\"git6\">6.拉取本地没有的远程分支</p></strong><br>经常有多人同时开发，然后需要拉取别人已经提交的开发好的分支进行修改。</p>\n<p>需要先<code>git fetch --all</code>拉取远程所有分支。<br>然后使用<code>git checkout 要拉取的分支名</code>切到想拉的分支上，这时候本地已经是远程的那个分支了。</p>\n<p><del>我怎么越写越敷衍了</del><br>&emsp;<br><strong><p id=\"git7\">7.将本地某分支强推到到远程另外一个指定分支</p></strong><br>当各种奇怪操作导致了无可救药的问题时，就只能强推了。</p>\n<p>一般情况下分支之间不会有太大不同，可以把本地能用的分支强推到线上的这个分支上，再用pr抢救下。但。。。架不住妖魔鬼怪的操作导致主分支完全不想要了，这个时候可以偷懒的用以下这个危险操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin 本地分支名:想推送的远程分支名 -f </span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#menu-git\">回到目录</a></strong><br>&emsp;<br><strong><p id=\"git8\">8.本地切来切去干了一堆无用功想撤回</p></strong><br>输入<code>git reflog</code>查看时间顺序下的所有操作,大概长下面这样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1a8bebe (HEAD -&gt; develop, origin/develop) HEAD@&#123;0&#125;: commit: fix: 🐛 change avatar</span><br><span class=\"line\">a09ce5a HEAD@&#123;1&#125;: commit: feat: 🎸 add something</span><br><span class=\"line\">f6b66b7 HEAD@&#123;2&#125;: commit: fix: 🎸 fix bug</span><br></pre></td></tr></table></figure>\n<p>找到想要回滚的时间点，比如我想回到<code>commit: feat: 🎸 add something</code>这个commit,对应的是<code>HEAD@&#123;1&#125;</code> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD@&#123;1&#125;</span><br></pre></td></tr></table></figure>\n<p>这个时候所有的内容都会彻底回到这个commit的版本，新发生的变更将会丢失。需要注意的是，回滚的版本只能是已经提交了commit，如果啥也没提交，那reflog后啥也没有，那你也回不去了。所以记得勤提交。</p>\n<p>这个操作配合<code>git push origin 想回滚的分支名 -f</code>就可以实现远程分支的回滚。</p>\n<p>不过hard还是要慎用，虽然后悔药有用，但是你放弃的那些commit也不见了。<del>就像脑子里进的那些水</del><br><strong><a href=\"#menu-git\">回到目录</a></strong><br>&emsp;<br><strong><p id=\"git9\">9.我只想回滚某个文件</p></strong><br>这个也挺常见的，有时候改了一大堆，发现某个文件的某个版本才是对的，就只想回滚这个文件。<br>首先找到正确版本的文件所在的commit的hash值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> ./README.md //想修改的文件路径</span><br><span class=\"line\"></span><br><span class=\"line\">commit <span class=\"built_in\">hash</span>值1 (HEAD -&gt; develop)</span><br><span class=\"line\">Merge: 12857b7 8fc2e03</span><br><span class=\"line\">Author: icey0126 </span><br><span class=\"line\">Date:   Tue Jun 29 16:01:41 2021 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    fix: 🐛 fix bug</span><br><span class=\"line\"></span><br><span class=\"line\">commit <span class=\"built_in\">hash</span>值2</span><br><span class=\"line\">Author: icey0126 </span><br><span class=\"line\">Date:   Tue Jun 29 15:55:41 2021 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    fix: 🐛 fix bug2</span><br></pre></td></tr></table></figure>\n<p>找到了<code>fix bug2</code>这个commit的hash值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout <span class=\"built_in\">hash</span>值2 ./README.md //利用<span class=\"built_in\">hash</span>回滚特定文件，注意，这里为了方便操作，使用<span class=\"built_in\">hash</span>的前六位就可以</span><br></pre></td></tr></table></figure>\n\n<p>回滚后注意需要提交。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&#x27;回滚README.md&#x27;</span> </span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#menu-git\">回到目录</a></strong><br>&emsp;<br><strong><p id=\"git10\">10.虽然没有冲突，但我想手动合</p></strong><br>怎么会有这么奇怪的要求。<del>还真有</del><br>在某个开发分支，想合并主分支时，虽然并没有冲突，但是想手动确认修改。可以配置如下命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge --no-commit --no-ff 要合进来的分支名</span><br></pre></td></tr></table></figure>\n<p>但这个命令有时候会不生效，我也不知道原因。<del>我只是想凑个10</del><br><strong><a href=\"#menu-git\">回到目录</a></strong><br>&emsp;<br><strong><p id=\"git11\">11.git的global config不小心设置了两个相同的key，想删删不掉</p></strong><br>突然想起来的一个比较常见的问题，有时候用<code>git config --global key value</code>设置全局配置时会不小心给同一个key设置了不同的value。</p>\n<p>本来吧，用<code>git config --global --unset key</code>就可以删掉这个全局配置了，但是出现了同一个key多个value的时候就会报错不让你这么操作。</p>\n<p>先用<code>git config --global -l</code>看看自己做了什么（看看全局配置了配了哪些参数）。</p>\n<p>然后可以用正规的办法删掉这个key对应的所有value</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --<span class=\"built_in\">unset</span> -all key</span><br></pre></td></tr></table></figure>\n\n<p>或者用不正规的办法，把这个key对应的值全部替换成我们设定的值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --replace-all key <span class=\"string\">&quot;随便给个value&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>由于git config的机制，只会保留一个相同的键值对，就可以通过正常的删除单个的操作来删除了。<br><strong><a href=\"#menu-git\">回到目录</a></strong></p>\n","site":{"data":{"styles":".fa-bilibili {\n  background: url(\"/images/bilibili-fill.svg\");\n  background-position: 50% 260%;\n  background-repeat: no-repeat;\n  height: 1rem;\n  width: 1rem;\n}\n"}},"excerpt":"","more":"<p>因为好久没写了，又懒得动脑子写新东西，就打算整理一些工作中常用的git命令。<br>其实也是因为9月就要过去了，但我啥文章也没写过。。。</p>\n<p>&emsp;<br><strong><h1 id=\"menu-git\">目录</h1></strong><br>    <strong><a href=\"#git1\">1.清空所有没有加入暂存区的修改</a></strong><br>    <strong><a href=\"#git2\">2.清空已经加入暂存区的修改</a></strong><br>    <strong><a href=\"#git3\">3.改东西改到一半临时切分支</a></strong><br>    <strong><a href=\"#git4\">4.配置命令行代理</a></strong><br>    <strong><a href=\"#git5\">5.有几个分支，只想合并某个commit</a></strong><br>    <strong><a href=\"#git6\">6.拉取本地没有的远程分支</a></strong><br>    <strong><a href=\"#git7\">7.将本地某分支强推到到远程另外一个指定分支</a></strong><br>    <strong><a href=\"#git8\">8.本地切来切去干了一堆无用功想撤回</a></strong><br>    <strong><a href=\"#git9\">9.我只想回滚某个文件</a></strong><br>    <strong><a href=\"#git10\">10.虽然没有冲突，但我想手动合</a></strong><br>    <strong><a href=\"#git11\">11.git的global config不小心设置了两个相同的key，想删删不掉</a></strong><br><br/></p>\n<p><strong><p id=\"git1\">1.清空所有没有加入暂存区的修改</p></strong> </p>\n<p>一般可以用<code>git checkout .</code>作为后悔药，但是如果有新增或删除文件就需要下面这个命令了。</p>\n<p>可以放弃所有修改、新增、删除文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout . &amp;&amp; git clean -df</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#menu-git\">回到目录</a></strong><br>&emsp;<br><strong><p id=\"git2\">2.清空已经加入暂存区的修改</p></strong> </p>\n<p>如果已经不小心用了<code>git add .</code>把修改加入了暂存区，但是又中途不想要这个修改了，可以如下操作。<br>这个做法可能比较邪道，但是能用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git stash</span><br></pre></td></tr></table></figure>\n\n<p>至于有没有强迫症，要不要删掉这个stash的内容就看自己习惯了。<br><strong><a href=\"#menu-git\">回到目录</a></strong><br>&emsp;<br><strong><p id=\"git3\">3.改东西改到一半临时切分支</p></strong> </p>\n<p>经常遇到在某个功能分支上开发到一半被临时叫去主分支修bug，代码写了一半又因为各种原因不想提交，就可以用下面的命令暂存修改。</p>\n<p>首先在当前分支输入如下命令暂存修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git stash</span><br></pre></td></tr></table></figure>\n\n<p>然后切出去改东西，等全部操作完了再切到要把暂存内容放出来的分支，使用如下命令把暂存的东西放出来。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，用stash存的一个个内容可以理解成一个栈，先进后出。</p>\n<p>也就是说，如果有多个分支都做了stash这个操作来暂存内容，那么你直接使用<code>git stash pop</code>放出暂存内容的时候，遵循先进后出的规则，放出的一定是你最后那次暂存的东西，而且也会自动从这个暂存栈删除这次暂存。但有的时候我们又希望跳着来。就可以用下面这个命令先查看这个暂存栈里的暂存记录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash list</span><br><span class=\"line\"></span><br><span class=\"line\">stash@&#123;0&#125;: WIP on branch1: ffb8e1b Merge pull request <span class=\"comment\">#202 from branch2</span></span><br><span class=\"line\">stash@&#123;1&#125;: WIP on branch2: fc36bd0 Merge pull request <span class=\"comment\">#171 from branch</span></span><br><span class=\"line\">stash@&#123;2&#125;: WIP on branch3: 404474c commit message</span><br></pre></td></tr></table></figure>\n\n<p>根据提示内容找到想要放出的暂存记录，使用如下命令放出暂存，不过使用下面这个命令是不会从暂存栈删除这条暂存记录的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash apply stash@&#123;1&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#menu-git\">回到目录</a></strong><br>&emsp;<br><strong><p id=\"git4\">4.配置命令行代理</p></strong> </p>\n<p>其实这个命令自从github版本更新以后已经没什么意义了但是还是写下。</p>\n<p>由于众所周知的原因，在国内如果是使用https的地址来git clone仓库到本地，比如这种地址<code>https://github.com/用户名/仓库名.git</code>，那么在使用git push时经常会遇到网络问题。<br>以前用windows系统的时候把代理配置手动改成全局就可以了，但是换了mac之后好像没啥用。后来才知道mac的命令行需要另外配置代理命令才能走代理push。实际的端口号需要找自己的ssr配置来看。我这个应该算是比较常见的配置。命令行回车一下再push就畅通无阻了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> http_proxy=socks5://127.0.0.1:1086;</span><br><span class=\"line\"><span class=\"built_in\">export</span> https_proxy=socks5://127.0.0.1:1086;</span><br></pre></td></tr></table></figure>\n\n<p>但是这个命令自从上次github更新之后就没意义了，gayhub现在为了安全问题好像需要配置一堆东西才能使用https来push代码，因为我过于讨厌配置这件事，就直接把https改成ssh了。<del>早知今日何必当初</del></p>\n<p>下面这个是把原本的https换成ssh的命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin （ssh-url）</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#menu-git\">回到目录</a></strong><br>&emsp;<br><strong><p id=\"git5\">5.有几个分支，只想合并某个commit</p></strong><br>实际场景中经常有基于某个分支开出的不同分支来应付不同项目的需求，有时候某个分支上更新的某个功能另外一个分支也需要，并且不希望吧这个分支上除了新功能以外的内容合过去，这个时候就可以用cherry-pick提交某个指定的commit。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry-pick  要合过来的分支名 </span><br><span class=\"line\">//写分支名会合并这个分支最新的一次commit</span><br><span class=\"line\">//也可以写某个commit的<span class=\"built_in\">hash</span>值，如果是commit的<span class=\"built_in\">hash</span>值那么只会合并这个指定的commit</span><br><span class=\"line\">git <span class=\"built_in\">log</span> //可以用来查看当前分支的commit历史，用来查询commit的<span class=\"built_in\">hash</span>值</span><br></pre></td></tr></table></figure>\n\n<p>如果cherry-pick遇到了冲突</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 先修改冲突</span><br><span class=\"line\">git status //查看修改</span><br><span class=\"line\">git add . //添加修改</span><br><span class=\"line\">git cherry-pick --<span class=\"built_in\">continue</span> //继续cherry-pick</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#menu-git\">回到目录</a></strong><br>&emsp;<br><strong><p id=\"git6\">6.拉取本地没有的远程分支</p></strong><br>经常有多人同时开发，然后需要拉取别人已经提交的开发好的分支进行修改。</p>\n<p>需要先<code>git fetch --all</code>拉取远程所有分支。<br>然后使用<code>git checkout 要拉取的分支名</code>切到想拉的分支上，这时候本地已经是远程的那个分支了。</p>\n<p><del>我怎么越写越敷衍了</del><br>&emsp;<br><strong><p id=\"git7\">7.将本地某分支强推到到远程另外一个指定分支</p></strong><br>当各种奇怪操作导致了无可救药的问题时，就只能强推了。</p>\n<p>一般情况下分支之间不会有太大不同，可以把本地能用的分支强推到线上的这个分支上，再用pr抢救下。但。。。架不住妖魔鬼怪的操作导致主分支完全不想要了，这个时候可以偷懒的用以下这个危险操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin 本地分支名:想推送的远程分支名 -f </span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#menu-git\">回到目录</a></strong><br>&emsp;<br><strong><p id=\"git8\">8.本地切来切去干了一堆无用功想撤回</p></strong><br>输入<code>git reflog</code>查看时间顺序下的所有操作,大概长下面这样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1a8bebe (HEAD -&gt; develop, origin/develop) HEAD@&#123;0&#125;: commit: fix: 🐛 change avatar</span><br><span class=\"line\">a09ce5a HEAD@&#123;1&#125;: commit: feat: 🎸 add something</span><br><span class=\"line\">f6b66b7 HEAD@&#123;2&#125;: commit: fix: 🎸 fix bug</span><br></pre></td></tr></table></figure>\n<p>找到想要回滚的时间点，比如我想回到<code>commit: feat: 🎸 add something</code>这个commit,对应的是<code>HEAD@&#123;1&#125;</code> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD@&#123;1&#125;</span><br></pre></td></tr></table></figure>\n<p>这个时候所有的内容都会彻底回到这个commit的版本，新发生的变更将会丢失。需要注意的是，回滚的版本只能是已经提交了commit，如果啥也没提交，那reflog后啥也没有，那你也回不去了。所以记得勤提交。</p>\n<p>这个操作配合<code>git push origin 想回滚的分支名 -f</code>就可以实现远程分支的回滚。</p>\n<p>不过hard还是要慎用，虽然后悔药有用，但是你放弃的那些commit也不见了。<del>就像脑子里进的那些水</del><br><strong><a href=\"#menu-git\">回到目录</a></strong><br>&emsp;<br><strong><p id=\"git9\">9.我只想回滚某个文件</p></strong><br>这个也挺常见的，有时候改了一大堆，发现某个文件的某个版本才是对的，就只想回滚这个文件。<br>首先找到正确版本的文件所在的commit的hash值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> ./README.md //想修改的文件路径</span><br><span class=\"line\"></span><br><span class=\"line\">commit <span class=\"built_in\">hash</span>值1 (HEAD -&gt; develop)</span><br><span class=\"line\">Merge: 12857b7 8fc2e03</span><br><span class=\"line\">Author: icey0126 </span><br><span class=\"line\">Date:   Tue Jun 29 16:01:41 2021 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    fix: 🐛 fix bug</span><br><span class=\"line\"></span><br><span class=\"line\">commit <span class=\"built_in\">hash</span>值2</span><br><span class=\"line\">Author: icey0126 </span><br><span class=\"line\">Date:   Tue Jun 29 15:55:41 2021 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    fix: 🐛 fix bug2</span><br></pre></td></tr></table></figure>\n<p>找到了<code>fix bug2</code>这个commit的hash值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout <span class=\"built_in\">hash</span>值2 ./README.md //利用<span class=\"built_in\">hash</span>回滚特定文件，注意，这里为了方便操作，使用<span class=\"built_in\">hash</span>的前六位就可以</span><br></pre></td></tr></table></figure>\n\n<p>回滚后注意需要提交。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&#x27;回滚README.md&#x27;</span> </span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#menu-git\">回到目录</a></strong><br>&emsp;<br><strong><p id=\"git10\">10.虽然没有冲突，但我想手动合</p></strong><br>怎么会有这么奇怪的要求。<del>还真有</del><br>在某个开发分支，想合并主分支时，虽然并没有冲突，但是想手动确认修改。可以配置如下命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge --no-commit --no-ff 要合进来的分支名</span><br></pre></td></tr></table></figure>\n<p>但这个命令有时候会不生效，我也不知道原因。<del>我只是想凑个10</del><br><strong><a href=\"#menu-git\">回到目录</a></strong><br>&emsp;<br><strong><p id=\"git11\">11.git的global config不小心设置了两个相同的key，想删删不掉</p></strong><br>突然想起来的一个比较常见的问题，有时候用<code>git config --global key value</code>设置全局配置时会不小心给同一个key设置了不同的value。</p>\n<p>本来吧，用<code>git config --global --unset key</code>就可以删掉这个全局配置了，但是出现了同一个key多个value的时候就会报错不让你这么操作。</p>\n<p>先用<code>git config --global -l</code>看看自己做了什么（看看全局配置了配了哪些参数）。</p>\n<p>然后可以用正规的办法删掉这个key对应的所有value</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --<span class=\"built_in\">unset</span> -all key</span><br></pre></td></tr></table></figure>\n\n<p>或者用不正规的办法，把这个key对应的值全部替换成我们设定的值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --replace-all key <span class=\"string\">&quot;随便给个value&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>由于git config的机制，只会保留一个相同的键值对，就可以通过正常的删除单个的操作来删除了。<br><strong><a href=\"#menu-git\">回到目录</a></strong></p>\n"},{"title":"K8S学习笔记","date":"2021-10-26T15:06:32.000Z","_content":"\n前阵子学了点杨波老师的k8s的入门课程，感觉讲得很清楚。最近公司内部正好在推GitOps，需要自己写一些yaml文件。干脆整理下之前学的东西。\n\n其实看日期也能知道是10月创建的文章，硬是被我拖延到了今天才写。\n\n下面可能包含很多本人错误的理解，容我先免个责。\n\n以及墙裂建议看过杨波老师的入门课再去看官网文档，很多概念理解起来会快很多。指个路：\n[Kubernetes基本概念和应用](https://www.bilibili.com/video/BV1Ja4y1x748) 也就3个小时左右，~~两倍速更快~~\n\n1.Pod\n> - Pod 类似于共享名字空间和文件系统卷的一组 Docker 容器。\n\n比较常见的是每个Pod一个容器，也会有一个Pod多个容器的情况。\n当一个Pod有多个容器时，它的成员容器共享网络和存储。\n\n一个简单的Pod资源定义文件：\n\n```bash\n\napiVersion: v1 #使用版本\nkind: Pod #类型\nmetadata: #元数据\n  name: myweb #资源名字，在同一个namespace下必须唯一\n  labels:\n    name: myweb #标签\nspec:\n  containers:\n  - name: myweb\n    image: kubeguide/tomcat-app: v1\n    ports:\n    - containerPort: 8080\n    env:\n    - name: MYSQL_SERVICE_HOST\n      value: 'mysql'\n    - name: MYSQL_SERVICE_PORT\n      value: '3306'\n\n```\n\n写不动了，哪天心情好了再继续。\n\n2.NodePort \n\n3.Service\n\n4.ReplicaSet\n\n5.Deployment\n\n6.ClusterIP Service\n\n7.ConfigMap\n\n8.Ingress\n\n9.Volume\n","source":"_posts/K8S学习笔记.md","raw":"---\ntitle: K8S学习笔记\ndate: 2021-10-26 23:06:32\ntags: \n- k8s\ncategories: \n- CS\n- 部署\n---\n\n前阵子学了点杨波老师的k8s的入门课程，感觉讲得很清楚。最近公司内部正好在推GitOps，需要自己写一些yaml文件。干脆整理下之前学的东西。\n\n其实看日期也能知道是10月创建的文章，硬是被我拖延到了今天才写。\n\n下面可能包含很多本人错误的理解，容我先免个责。\n\n以及墙裂建议看过杨波老师的入门课再去看官网文档，很多概念理解起来会快很多。指个路：\n[Kubernetes基本概念和应用](https://www.bilibili.com/video/BV1Ja4y1x748) 也就3个小时左右，~~两倍速更快~~\n\n1.Pod\n> - Pod 类似于共享名字空间和文件系统卷的一组 Docker 容器。\n\n比较常见的是每个Pod一个容器，也会有一个Pod多个容器的情况。\n当一个Pod有多个容器时，它的成员容器共享网络和存储。\n\n一个简单的Pod资源定义文件：\n\n```bash\n\napiVersion: v1 #使用版本\nkind: Pod #类型\nmetadata: #元数据\n  name: myweb #资源名字，在同一个namespace下必须唯一\n  labels:\n    name: myweb #标签\nspec:\n  containers:\n  - name: myweb\n    image: kubeguide/tomcat-app: v1\n    ports:\n    - containerPort: 8080\n    env:\n    - name: MYSQL_SERVICE_HOST\n      value: 'mysql'\n    - name: MYSQL_SERVICE_PORT\n      value: '3306'\n\n```\n\n写不动了，哪天心情好了再继续。\n\n2.NodePort \n\n3.Service\n\n4.ReplicaSet\n\n5.Deployment\n\n6.ClusterIP Service\n\n7.ConfigMap\n\n8.Ingress\n\n9.Volume\n","slug":"K8S学习笔记","published":1,"updated":"2022-03-25T13:56:37.631Z","_id":"ckwdkzu1y00002rt651sj1afi","comments":1,"layout":"post","photos":[],"link":"","content":"<p>前阵子学了点杨波老师的k8s的入门课程，感觉讲得很清楚。最近公司内部正好在推GitOps，需要自己写一些yaml文件。干脆整理下之前学的东西。</p>\n<p>其实看日期也能知道是10月创建的文章，硬是被我拖延到了今天才写。</p>\n<p>下面可能包含很多本人错误的理解，容我先免个责。</p>\n<p>以及墙裂建议看过杨波老师的入门课再去看官网文档，很多概念理解起来会快很多。指个路：<br><a href=\"https://www.bilibili.com/video/BV1Ja4y1x748\">Kubernetes基本概念和应用</a> 也就3个小时左右，<del>两倍速更快</del></p>\n<p>1.Pod</p>\n<blockquote>\n<ul>\n<li>Pod 类似于共享名字空间和文件系统卷的一组 Docker 容器。</li>\n</ul>\n</blockquote>\n<p>比较常见的是每个Pod一个容器，也会有一个Pod多个容器的情况。<br>当一个Pod有多个容器时，它的成员容器共享网络和存储。</p>\n<p>一个简单的Pod资源定义文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: v1 <span class=\"comment\">#使用版本</span></span><br><span class=\"line\">kind: Pod <span class=\"comment\">#类型</span></span><br><span class=\"line\">metadata: <span class=\"comment\">#元数据</span></span><br><span class=\"line\">  name: myweb <span class=\"comment\">#资源名字，在同一个namespace下必须唯一</span></span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    name: myweb <span class=\"comment\">#标签</span></span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: myweb</span><br><span class=\"line\">    image: kubeguide/tomcat-app: v1</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">    - containerPort: 8080</span><br><span class=\"line\">    env:</span><br><span class=\"line\">    - name: MYSQL_SERVICE_HOST</span><br><span class=\"line\">      value: <span class=\"string\">&#x27;mysql&#x27;</span></span><br><span class=\"line\">    - name: MYSQL_SERVICE_PORT</span><br><span class=\"line\">      value: <span class=\"string\">&#x27;3306&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>写不动了，哪天心情好了再继续。</p>\n<p>2.NodePort </p>\n<p>3.Service</p>\n<p>4.ReplicaSet</p>\n<p>5.Deployment</p>\n<p>6.ClusterIP Service</p>\n<p>7.ConfigMap</p>\n<p>8.Ingress</p>\n<p>9.Volume</p>\n","site":{"data":{"styles":".fa-bilibili {\n  background: url(\"/images/bilibili-fill.svg\");\n  background-position: 50% 260%;\n  background-repeat: no-repeat;\n  height: 1rem;\n  width: 1rem;\n}\n"}},"excerpt":"","more":"<p>前阵子学了点杨波老师的k8s的入门课程，感觉讲得很清楚。最近公司内部正好在推GitOps，需要自己写一些yaml文件。干脆整理下之前学的东西。</p>\n<p>其实看日期也能知道是10月创建的文章，硬是被我拖延到了今天才写。</p>\n<p>下面可能包含很多本人错误的理解，容我先免个责。</p>\n<p>以及墙裂建议看过杨波老师的入门课再去看官网文档，很多概念理解起来会快很多。指个路：<br><a href=\"https://www.bilibili.com/video/BV1Ja4y1x748\">Kubernetes基本概念和应用</a> 也就3个小时左右，<del>两倍速更快</del></p>\n<p>1.Pod</p>\n<blockquote>\n<ul>\n<li>Pod 类似于共享名字空间和文件系统卷的一组 Docker 容器。</li>\n</ul>\n</blockquote>\n<p>比较常见的是每个Pod一个容器，也会有一个Pod多个容器的情况。<br>当一个Pod有多个容器时，它的成员容器共享网络和存储。</p>\n<p>一个简单的Pod资源定义文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: v1 <span class=\"comment\">#使用版本</span></span><br><span class=\"line\">kind: Pod <span class=\"comment\">#类型</span></span><br><span class=\"line\">metadata: <span class=\"comment\">#元数据</span></span><br><span class=\"line\">  name: myweb <span class=\"comment\">#资源名字，在同一个namespace下必须唯一</span></span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    name: myweb <span class=\"comment\">#标签</span></span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: myweb</span><br><span class=\"line\">    image: kubeguide/tomcat-app: v1</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">    - containerPort: 8080</span><br><span class=\"line\">    env:</span><br><span class=\"line\">    - name: MYSQL_SERVICE_HOST</span><br><span class=\"line\">      value: <span class=\"string\">&#x27;mysql&#x27;</span></span><br><span class=\"line\">    - name: MYSQL_SERVICE_PORT</span><br><span class=\"line\">      value: <span class=\"string\">&#x27;3306&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>写不动了，哪天心情好了再继续。</p>\n<p>2.NodePort </p>\n<p>3.Service</p>\n<p>4.ReplicaSet</p>\n<p>5.Deployment</p>\n<p>6.ClusterIP Service</p>\n<p>7.ConfigMap</p>\n<p>8.Ingress</p>\n<p>9.Volume</p>\n"},{"title":"leetcode真好玩","date":"2021-11-24T13:16:41.000Z","_content":"\n最近失眠真！的！好！严！重！啊！\n\n为了拯救我已经逝去的心理健康，我决定找点能让自己开心起来的事情做。于是想起了一直被我遗忘在角落的leetcode账号，除了有点累，讲道理刷算法真的挺好玩的。~~不过也再一次深刻认知到自己到底有多菜~~\n\n上上周还连着两天跑去刷了上海书城，空了一楼，剩下的几楼也空了一大半，看着挺难过的。\n\n我童年为数不多的快乐就是逛书店了。记得小时候有段时间一有空就一个人坐车来市中心去逛外文书店，然后去每个楼层瞎逛。我那套三体实体书也是某次福州路打折买的。后来电商越来越发达，确实去福州路去的也少了。但还是经常带人一起去逛附近小巷的二手外文书店买打折原版书。\n\n作为福州路扛把子的上海书城关门整修（这种清仓力度我真的怀疑它不会再开了），就感觉一下子少了点什么。而且重点是我最喜欢的kfc甜品站特供北海道冰激凌也不知道什么时候因为福州路甜品站关门而找不到了。\n\n果然能让人快乐的事物都是转瞬即逝的。我到底什么时候才能成熟一点看淡这些离开啊。\n\n不过比较好玩的是，逛书店的大家看到我带着行李箱，第一反应不是惊奇而是纷纷懊悔自己怎么也没带个箱子来装书。因为买太多还被友人吐槽你们上海买书都是论斤买的吗hhhhhhh\n\n~~怎么又写了一篇文不对题的生活流水账~~\n\n\n","source":"_posts/leetcode真好玩.md","raw":"---\ntitle: leetcode真好玩\ndate: 2021-11-24 21:16:41\ntags: \n- 生活\ncategories: \n- 日常\n---\n\n最近失眠真！的！好！严！重！啊！\n\n为了拯救我已经逝去的心理健康，我决定找点能让自己开心起来的事情做。于是想起了一直被我遗忘在角落的leetcode账号，除了有点累，讲道理刷算法真的挺好玩的。~~不过也再一次深刻认知到自己到底有多菜~~\n\n上上周还连着两天跑去刷了上海书城，空了一楼，剩下的几楼也空了一大半，看着挺难过的。\n\n我童年为数不多的快乐就是逛书店了。记得小时候有段时间一有空就一个人坐车来市中心去逛外文书店，然后去每个楼层瞎逛。我那套三体实体书也是某次福州路打折买的。后来电商越来越发达，确实去福州路去的也少了。但还是经常带人一起去逛附近小巷的二手外文书店买打折原版书。\n\n作为福州路扛把子的上海书城关门整修（这种清仓力度我真的怀疑它不会再开了），就感觉一下子少了点什么。而且重点是我最喜欢的kfc甜品站特供北海道冰激凌也不知道什么时候因为福州路甜品站关门而找不到了。\n\n果然能让人快乐的事物都是转瞬即逝的。我到底什么时候才能成熟一点看淡这些离开啊。\n\n不过比较好玩的是，逛书店的大家看到我带着行李箱，第一反应不是惊奇而是纷纷懊悔自己怎么也没带个箱子来装书。因为买太多还被友人吐槽你们上海买书都是论斤买的吗hhhhhhh\n\n~~怎么又写了一篇文不对题的生活流水账~~\n\n\n","slug":"leetcode真好玩","published":1,"updated":"2021-11-24T13:47:01.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwdkzu2900012rt60amq7fe6","content":"<p>最近失眠真！的！好！严！重！啊！</p>\n<p>为了拯救我已经逝去的心理健康，我决定找点能让自己开心起来的事情做。于是想起了一直被我遗忘在角落的leetcode账号，除了有点累，讲道理刷算法真的挺好玩的。<del>不过也再一次深刻认知到自己到底有多菜</del></p>\n<p>上上周还连着两天跑去刷了上海书城，空了一楼，剩下的几楼也空了一大半，看着挺难过的。</p>\n<p>我童年为数不多的快乐就是逛书店了。记得小时候有段时间一有空就一个人坐车来市中心去逛外文书店，然后去每个楼层瞎逛。我那套三体实体书也是某次福州路打折买的。后来电商越来越发达，确实去福州路去的也少了。但还是经常带人一起去逛附近小巷的二手外文书店买打折原版书。</p>\n<p>作为福州路扛把子的上海书城关门整修（这种清仓力度我真的怀疑它不会再开了），就感觉一下子少了点什么。而且重点是我最喜欢的kfc甜品站特供北海道冰激凌也不知道什么时候因为福州路甜品站关门而找不到了。</p>\n<p>果然能让人快乐的事物都是转瞬即逝的。我到底什么时候才能成熟一点看淡这些离开啊。</p>\n<p>不过比较好玩的是，逛书店的大家看到我带着行李箱，第一反应不是惊奇而是纷纷懊悔自己怎么也没带个箱子来装书。因为买太多还被友人吐槽你们上海买书都是论斤买的吗hhhhhhh</p>\n<p><del>怎么又写了一篇文不对题的生活流水账</del></p>\n","site":{"data":{"styles":".fa-bilibili {\n  background: url(\"/images/bilibili-fill.svg\");\n  background-position: 50% 260%;\n  background-repeat: no-repeat;\n  height: 1rem;\n  width: 1rem;\n}\n"}},"excerpt":"","more":"<p>最近失眠真！的！好！严！重！啊！</p>\n<p>为了拯救我已经逝去的心理健康，我决定找点能让自己开心起来的事情做。于是想起了一直被我遗忘在角落的leetcode账号，除了有点累，讲道理刷算法真的挺好玩的。<del>不过也再一次深刻认知到自己到底有多菜</del></p>\n<p>上上周还连着两天跑去刷了上海书城，空了一楼，剩下的几楼也空了一大半，看着挺难过的。</p>\n<p>我童年为数不多的快乐就是逛书店了。记得小时候有段时间一有空就一个人坐车来市中心去逛外文书店，然后去每个楼层瞎逛。我那套三体实体书也是某次福州路打折买的。后来电商越来越发达，确实去福州路去的也少了。但还是经常带人一起去逛附近小巷的二手外文书店买打折原版书。</p>\n<p>作为福州路扛把子的上海书城关门整修（这种清仓力度我真的怀疑它不会再开了），就感觉一下子少了点什么。而且重点是我最喜欢的kfc甜品站特供北海道冰激凌也不知道什么时候因为福州路甜品站关门而找不到了。</p>\n<p>果然能让人快乐的事物都是转瞬即逝的。我到底什么时候才能成熟一点看淡这些离开啊。</p>\n<p>不过比较好玩的是，逛书店的大家看到我带着行李箱，第一反应不是惊奇而是纷纷懊悔自己怎么也没带个箱子来装书。因为买太多还被友人吐槽你们上海买书都是论斤买的吗hhhhhhh</p>\n<p><del>怎么又写了一篇文不对题的生活流水账</del></p>\n"},{"title":"隔离真的好无聊","date":"2022-03-05T10:56:33.000Z","_content":"\n虽然我也很想提起劲写点有意思的bug奇遇记，但事实是，最近几个月我真的完全提不起劲。\n\n小区惨遭隔离，要至少坐七天牢。按理说在家办公应该挺爽的，但是真！的！好！无！聊！啊！\n\n这几个月编程水平没什么长进倒是配流水线配得越来越熟练了。看着项目越来越多的环境，真的越看越脑子疼。尤其是一个功能所有分支都要，但是不同分支又不能直接乱合，需要一个个合到各个分支，同步起来真是恶心，因为实在太看不下去了就搞了个git flow的脚本自动提pr，但感觉好像也没方便多少，但我感觉至少我不操心同步问题了。\n\n不过还是干了点好玩的事的，为了让自己这种死宅不会因为不动而猝死报了一个乒乓球班，~~虽然每次打完球喘半天~~。但奈何我太菜到现在还不能和人对打起来，~~结果被人吐槽功利心太重~~，但当你周围全是一些可以随意切菜的同学时，朋友，你难道不会焦虑吗。~~没错我就是功利心太重~~\n\n对了，还认识了一个我一样脑子进水的倒霉蛋大佬，有幸被他拉进了一个游戏汉化组做苦力，群里的聊天内容让我深刻认知到自己脱宅已久，不知道steam上的补丁啥时候能出来。\n\n其实想想让我无聊的主要原因可能还是因为最近卸载了微博。这两月的首页看得我整个人更丧了，干脆卸载为敬。\n\n本来好不容易多出来这么多时间其实可以静下心来学自己感兴趣的东西，可惜就是静不下来，只能看看杂书解闷。脑子疼。\n\n要形容我有多无聊呢，我甚至已经开始学习如何化妆了。\n","source":"_posts/隔离真的好无聊.md","raw":"---\ntitle: 隔离真的好无聊\ndate: 2022-03-05 18:56:33\ntags: \n- 生活\ncategories: \n- 日常\n---\n\n虽然我也很想提起劲写点有意思的bug奇遇记，但事实是，最近几个月我真的完全提不起劲。\n\n小区惨遭隔离，要至少坐七天牢。按理说在家办公应该挺爽的，但是真！的！好！无！聊！啊！\n\n这几个月编程水平没什么长进倒是配流水线配得越来越熟练了。看着项目越来越多的环境，真的越看越脑子疼。尤其是一个功能所有分支都要，但是不同分支又不能直接乱合，需要一个个合到各个分支，同步起来真是恶心，因为实在太看不下去了就搞了个git flow的脚本自动提pr，但感觉好像也没方便多少，但我感觉至少我不操心同步问题了。\n\n不过还是干了点好玩的事的，为了让自己这种死宅不会因为不动而猝死报了一个乒乓球班，~~虽然每次打完球喘半天~~。但奈何我太菜到现在还不能和人对打起来，~~结果被人吐槽功利心太重~~，但当你周围全是一些可以随意切菜的同学时，朋友，你难道不会焦虑吗。~~没错我就是功利心太重~~\n\n对了，还认识了一个我一样脑子进水的倒霉蛋大佬，有幸被他拉进了一个游戏汉化组做苦力，群里的聊天内容让我深刻认知到自己脱宅已久，不知道steam上的补丁啥时候能出来。\n\n其实想想让我无聊的主要原因可能还是因为最近卸载了微博。这两月的首页看得我整个人更丧了，干脆卸载为敬。\n\n本来好不容易多出来这么多时间其实可以静下心来学自己感兴趣的东西，可惜就是静不下来，只能看看杂书解闷。脑子疼。\n\n要形容我有多无聊呢，我甚至已经开始学习如何化妆了。\n","slug":"隔离真的好无聊","published":1,"updated":"2022-03-05T11:49:37.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0dsarr600008dt68kf952jl","content":"<p>虽然我也很想提起劲写点有意思的bug奇遇记，但事实是，最近几个月我真的完全提不起劲。</p>\n<p>小区惨遭隔离，要至少坐七天牢。按理说在家办公应该挺爽的，但是真！的！好！无！聊！啊！</p>\n<p>这几个月编程水平没什么长进倒是配流水线配得越来越熟练了。看着项目越来越多的环境，真的越看越脑子疼。尤其是一个功能所有分支都要，但是不同分支又不能直接乱合，需要一个个合到各个分支，同步起来真是恶心，因为实在太看不下去了就搞了个git flow的脚本自动提pr，但感觉好像也没方便多少，但我感觉至少我不操心同步问题了。</p>\n<p>不过还是干了点好玩的事的，为了让自己这种死宅不会因为不动而猝死报了一个乒乓球班，<del>虽然每次打完球喘半天</del>。但奈何我太菜到现在还不能和人对打起来，<del>结果被人吐槽功利心太重</del>，但当你周围全是一些可以随意切菜的同学时，朋友，你难道不会焦虑吗。<del>没错我就是功利心太重</del></p>\n<p>对了，还认识了一个我一样脑子进水的倒霉蛋大佬，有幸被他拉进了一个游戏汉化组做苦力，群里的聊天内容让我深刻认知到自己脱宅已久，不知道steam上的补丁啥时候能出来。</p>\n<p>其实想想让我无聊的主要原因可能还是因为最近卸载了微博。这两月的首页看得我整个人更丧了，干脆卸载为敬。</p>\n<p>本来好不容易多出来这么多时间其实可以静下心来学自己感兴趣的东西，可惜就是静不下来，只能看看杂书解闷。脑子疼。</p>\n<p>要形容我有多无聊呢，我甚至已经开始学习如何化妆了。</p>\n","site":{"data":{"styles":".fa-bilibili {\n  background: url(\"/images/bilibili-fill.svg\");\n  background-position: 50% 260%;\n  background-repeat: no-repeat;\n  height: 1rem;\n  width: 1rem;\n}\n"}},"excerpt":"","more":"<p>虽然我也很想提起劲写点有意思的bug奇遇记，但事实是，最近几个月我真的完全提不起劲。</p>\n<p>小区惨遭隔离，要至少坐七天牢。按理说在家办公应该挺爽的，但是真！的！好！无！聊！啊！</p>\n<p>这几个月编程水平没什么长进倒是配流水线配得越来越熟练了。看着项目越来越多的环境，真的越看越脑子疼。尤其是一个功能所有分支都要，但是不同分支又不能直接乱合，需要一个个合到各个分支，同步起来真是恶心，因为实在太看不下去了就搞了个git flow的脚本自动提pr，但感觉好像也没方便多少，但我感觉至少我不操心同步问题了。</p>\n<p>不过还是干了点好玩的事的，为了让自己这种死宅不会因为不动而猝死报了一个乒乓球班，<del>虽然每次打完球喘半天</del>。但奈何我太菜到现在还不能和人对打起来，<del>结果被人吐槽功利心太重</del>，但当你周围全是一些可以随意切菜的同学时，朋友，你难道不会焦虑吗。<del>没错我就是功利心太重</del></p>\n<p>对了，还认识了一个我一样脑子进水的倒霉蛋大佬，有幸被他拉进了一个游戏汉化组做苦力，群里的聊天内容让我深刻认知到自己脱宅已久，不知道steam上的补丁啥时候能出来。</p>\n<p>其实想想让我无聊的主要原因可能还是因为最近卸载了微博。这两月的首页看得我整个人更丧了，干脆卸载为敬。</p>\n<p>本来好不容易多出来这么多时间其实可以静下心来学自己感兴趣的东西，可惜就是静不下来，只能看看杂书解闷。脑子疼。</p>\n<p>要形容我有多无聊呢，我甚至已经开始学习如何化妆了。</p>\n"},{"title":"记录一个无法构建镜像的坑","date":"2022-03-25T13:54:28.000Z","_content":"\n在和甲方进行技术转移时遇到的一个坑，在我本地构建镜像完全没有问题，但是甲方那边各种报错。其中经历了无数的坑，但是记录一下一个最坑的。\n\n使用相同仓库相同Dockerfile在甲方的机子上构建报了下面这个错，原本以为是甲方内部网络镜像源的问题，但是细问以后发现甲方的电脑能连外网。\n\n```\nError parsing reference: \"node:10.15.1 as build\" is not a valid repository/tag: invalid reference format\n```\n\n迷幻的是，问了公司的后端小哥，他们后端的镜像之前在甲方机器上是正常构建的。而且甲方机器上也能正常pull这个node:10.15.1的镜像。遂开始研究起我们前端的Dockerfile到底有什么魔力能让甲方的电脑就是构建不成功。\n\n反正最后搜来搜去发现了一个stack overflow上的提问，[Dockerfile is not a valid repository/tag: invalid reference format](https://stackoverflow.com/questions/48848020/dockerfile-is-not-a-valid-repository-tag-invalid-reference-format)\n\n结论是前端的Dockerfile使用了[multi-stage builds(多阶段构建)](https://docs.docker.com/develop/develop-images/multistage-build/)，而这个特性是在docker的17.06版本引入的。而我本地的docker是20多，绰绰有余。于是赶紧问甲方机器docker版本，~~说实话我本来以为也就是低了一两个版本~~，万万没想到甲方的机器居然是1.13.1啊！！！多么古老的版本！反正最后升了一下级就可以正常build了。\n\n都写到这了，主要是顺带学习一下这个多阶段构建，之前的Dockerfile基本都是cv之前其他项目的，只学习了里面的命令，没有注意到这个多阶段构建。感觉别人总结的挺好的就不想重新写一遍了，指路：[Dockerfile的多阶段构建（multi-stage builds）](https://blog.csdn.net/hjxisking/article/details/108203294)。当然英语好的也可以直接看上面那个官方文档。\n\n对于前端来说在构建时使用了node，但实际运行起来也就是一堆静态的js文件，很适合用多阶段构建来减少镜像体积。我感觉只要是有编译并且运行时不依赖编译环境的情况好像都挺适合多阶段构建的，是一个用来拯救动辄打一个g镜像的好办法。~~但我们后端用的python啊~~\n\n","source":"_posts/记录一个无法构建镜像的坑.md","raw":"---\ntitle: 记录一个无法构建镜像的坑\ndate: 2022-03-25 21:54:28\ntags: \n- docker\n- 踩坑\ncategories: \n- CS\n- 部署\n---\n\n在和甲方进行技术转移时遇到的一个坑，在我本地构建镜像完全没有问题，但是甲方那边各种报错。其中经历了无数的坑，但是记录一下一个最坑的。\n\n使用相同仓库相同Dockerfile在甲方的机子上构建报了下面这个错，原本以为是甲方内部网络镜像源的问题，但是细问以后发现甲方的电脑能连外网。\n\n```\nError parsing reference: \"node:10.15.1 as build\" is not a valid repository/tag: invalid reference format\n```\n\n迷幻的是，问了公司的后端小哥，他们后端的镜像之前在甲方机器上是正常构建的。而且甲方机器上也能正常pull这个node:10.15.1的镜像。遂开始研究起我们前端的Dockerfile到底有什么魔力能让甲方的电脑就是构建不成功。\n\n反正最后搜来搜去发现了一个stack overflow上的提问，[Dockerfile is not a valid repository/tag: invalid reference format](https://stackoverflow.com/questions/48848020/dockerfile-is-not-a-valid-repository-tag-invalid-reference-format)\n\n结论是前端的Dockerfile使用了[multi-stage builds(多阶段构建)](https://docs.docker.com/develop/develop-images/multistage-build/)，而这个特性是在docker的17.06版本引入的。而我本地的docker是20多，绰绰有余。于是赶紧问甲方机器docker版本，~~说实话我本来以为也就是低了一两个版本~~，万万没想到甲方的机器居然是1.13.1啊！！！多么古老的版本！反正最后升了一下级就可以正常build了。\n\n都写到这了，主要是顺带学习一下这个多阶段构建，之前的Dockerfile基本都是cv之前其他项目的，只学习了里面的命令，没有注意到这个多阶段构建。感觉别人总结的挺好的就不想重新写一遍了，指路：[Dockerfile的多阶段构建（multi-stage builds）](https://blog.csdn.net/hjxisking/article/details/108203294)。当然英语好的也可以直接看上面那个官方文档。\n\n对于前端来说在构建时使用了node，但实际运行起来也就是一堆静态的js文件，很适合用多阶段构建来减少镜像体积。我感觉只要是有编译并且运行时不依赖编译环境的情况好像都挺适合多阶段构建的，是一个用来拯救动辄打一个g镜像的好办法。~~但我们后端用的python啊~~\n\n","slug":"记录一个无法构建镜像的坑","published":1,"updated":"2022-03-25T14:32:41.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl16iwgjh0000fht6agg5devn","content":"<p>在和甲方进行技术转移时遇到的一个坑，在我本地构建镜像完全没有问题，但是甲方那边各种报错。其中经历了无数的坑，但是记录一下一个最坑的。</p>\n<p>使用相同仓库相同Dockerfile在甲方的机子上构建报了下面这个错，原本以为是甲方内部网络镜像源的问题，但是细问以后发现甲方的电脑能连外网。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error parsing reference: &quot;node:10.15.1 as build&quot; is not a valid repository/tag: invalid reference format</span><br></pre></td></tr></table></figure>\n\n<p>迷幻的是，问了公司的后端小哥，他们后端的镜像之前在甲方机器上是正常构建的。而且甲方机器上也能正常pull这个node:10.15.1的镜像。遂开始研究起我们前端的Dockerfile到底有什么魔力能让甲方的电脑就是构建不成功。</p>\n<p>反正最后搜来搜去发现了一个stack overflow上的提问，<a href=\"https://stackoverflow.com/questions/48848020/dockerfile-is-not-a-valid-repository-tag-invalid-reference-format\">Dockerfile is not a valid repository/tag: invalid reference format</a></p>\n<p>结论是前端的Dockerfile使用了<a href=\"https://docs.docker.com/develop/develop-images/multistage-build/\">multi-stage builds(多阶段构建)</a>，而这个特性是在docker的17.06版本引入的。而我本地的docker是20多，绰绰有余。于是赶紧问甲方机器docker版本，<del>说实话我本来以为也就是低了一两个版本</del>，万万没想到甲方的机器居然是1.13.1啊！！！多么古老的版本！反正最后升了一下级就可以正常build了。</p>\n<p>都写到这了，主要是顺带学习一下这个多阶段构建，之前的Dockerfile基本都是cv之前其他项目的，只学习了里面的命令，没有注意到这个多阶段构建。感觉别人总结的挺好的就不想重新写一遍了，指路：<a href=\"https://blog.csdn.net/hjxisking/article/details/108203294\">Dockerfile的多阶段构建（multi-stage builds）</a>。当然英语好的也可以直接看上面那个官方文档。</p>\n<p>对于前端来说在构建时使用了node，但实际运行起来也就是一堆静态的js文件，很适合用多阶段构建来减少镜像体积。我感觉只要是有编译并且运行时不依赖编译环境的情况好像都挺适合多阶段构建的，是一个用来拯救动辄打一个g镜像的好办法。<del>但我们后端用的python啊</del></p>\n","site":{"data":{"styles":".fa-bilibili {\n  background: url(\"/images/bilibili-fill.svg\");\n  background-position: 50% 260%;\n  background-repeat: no-repeat;\n  height: 1rem;\n  width: 1rem;\n}\n"}},"excerpt":"","more":"<p>在和甲方进行技术转移时遇到的一个坑，在我本地构建镜像完全没有问题，但是甲方那边各种报错。其中经历了无数的坑，但是记录一下一个最坑的。</p>\n<p>使用相同仓库相同Dockerfile在甲方的机子上构建报了下面这个错，原本以为是甲方内部网络镜像源的问题，但是细问以后发现甲方的电脑能连外网。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error parsing reference: &quot;node:10.15.1 as build&quot; is not a valid repository/tag: invalid reference format</span><br></pre></td></tr></table></figure>\n\n<p>迷幻的是，问了公司的后端小哥，他们后端的镜像之前在甲方机器上是正常构建的。而且甲方机器上也能正常pull这个node:10.15.1的镜像。遂开始研究起我们前端的Dockerfile到底有什么魔力能让甲方的电脑就是构建不成功。</p>\n<p>反正最后搜来搜去发现了一个stack overflow上的提问，<a href=\"https://stackoverflow.com/questions/48848020/dockerfile-is-not-a-valid-repository-tag-invalid-reference-format\">Dockerfile is not a valid repository/tag: invalid reference format</a></p>\n<p>结论是前端的Dockerfile使用了<a href=\"https://docs.docker.com/develop/develop-images/multistage-build/\">multi-stage builds(多阶段构建)</a>，而这个特性是在docker的17.06版本引入的。而我本地的docker是20多，绰绰有余。于是赶紧问甲方机器docker版本，<del>说实话我本来以为也就是低了一两个版本</del>，万万没想到甲方的机器居然是1.13.1啊！！！多么古老的版本！反正最后升了一下级就可以正常build了。</p>\n<p>都写到这了，主要是顺带学习一下这个多阶段构建，之前的Dockerfile基本都是cv之前其他项目的，只学习了里面的命令，没有注意到这个多阶段构建。感觉别人总结的挺好的就不想重新写一遍了，指路：<a href=\"https://blog.csdn.net/hjxisking/article/details/108203294\">Dockerfile的多阶段构建（multi-stage builds）</a>。当然英语好的也可以直接看上面那个官方文档。</p>\n<p>对于前端来说在构建时使用了node，但实际运行起来也就是一堆静态的js文件，很适合用多阶段构建来减少镜像体积。我感觉只要是有编译并且运行时不依赖编译环境的情况好像都挺适合多阶段构建的，是一个用来拯救动辄打一个g镜像的好办法。<del>但我们后端用的python啊</del></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cks69zwto00036bt6bjyx21s5","category_id":"cks69zwtq00046bt6dk1d142f","_id":"cks69zwu1000e6bt60ea8detm"},{"post_id":"cks69zwtu00076bt67xmve8ll","category_id":"cks69zwtz000b6bt68j3qezp7","_id":"cks69zwu2000i6bt6dclwb6fu"},{"post_id":"cks69zwtv00086bt6fx92alor","category_id":"cks69zwtq00046bt6dk1d142f","_id":"cks69zwu5000n6bt613exdd0o"},{"post_id":"cks69zwtv00086bt6fx92alor","category_id":"cks69zwu1000g6bt691zmah21","_id":"cks69zwu5000p6bt6gqxr7epx"},{"post_id":"cks69zwtj00016bt6d7ym5lk3","category_id":"cks69zwtq00046bt6dk1d142f","_id":"cks69zwu6000r6bt64kgcfa5l"},{"post_id":"cks69zwtj00016bt6d7ym5lk3","category_id":"cks69zwu1000g6bt691zmah21","_id":"cks69zwu6000t6bt672xfdx3t"},{"post_id":"cktd482mk0000rat67f4t8vfb","category_id":"cks69zwtq00046bt6dk1d142f","_id":"cktd482mn0003rat636zs7ky7"},{"post_id":"cktd482mk0000rat67f4t8vfb","category_id":"cktd2gn240002ljt6hfahg184","_id":"cktd482mn0004rat6goxm4fx4"},{"post_id":"ckwdkzu1y00002rt651sj1afi","category_id":"cks69zwtq00046bt6dk1d142f","_id":"ckwdkzu2j00042rt6gomi8k0s"},{"post_id":"ckwdkzu2900012rt60amq7fe6","category_id":"cks69zwtz000b6bt68j3qezp7","_id":"ckwdkzu2j00052rt64z4ud54w"},{"post_id":"cl0dsarr600008dt68kf952jl","category_id":"cks69zwtz000b6bt68j3qezp7","_id":"cl0dsarrd00028dt6d55bg2g4"},{"post_id":"ckwdkzu1y00002rt651sj1afi","category_id":"cl16iwgjj0001fht65h29ehm7","_id":"cl16iwgjr0005fht6gawec92l"},{"post_id":"cl16iwgjh0000fht6agg5devn","category_id":"cks69zwtq00046bt6dk1d142f","_id":"cl16iwgjr0007fht6fcvnfoc1"},{"post_id":"cl16iwgjh0000fht6agg5devn","category_id":"cl16iwgjj0001fht65h29ehm7","_id":"cl16iwgjr0008fht6bl62a2va"}],"PostTag":[{"post_id":"cks69zwtj00016bt6d7ym5lk3","tag_id":"cks69zwts00056bt600zqght5","_id":"cks69zwu0000d6bt63sp5bzql"},{"post_id":"cks69zwtj00016bt6d7ym5lk3","tag_id":"cks69zwtx000a6bt674rtase8","_id":"cks69zwu1000f6bt6e30x6331"},{"post_id":"cks69zwto00036bt6bjyx21s5","tag_id":"cks69zwtz000c6bt67sxybxxr","_id":"cks69zwu4000l6bt66dcu1x4c"},{"post_id":"cks69zwto00036bt6bjyx21s5","tag_id":"cks69zwtx000a6bt674rtase8","_id":"cks69zwu4000m6bt647u18kvy"},{"post_id":"cks69zwtu00076bt67xmve8ll","tag_id":"cks69zwu3000k6bt673kk8dr5","_id":"cks69zwu5000q6bt68p2p9adr"},{"post_id":"cks69zwtv00086bt6fx92alor","tag_id":"cks69zwtx000a6bt674rtase8","_id":"cks69zwu7000v6bt6gg80am9c"},{"post_id":"cks69zwtv00086bt6fx92alor","tag_id":"cks69zwu6000s6bt63w64h6z8","_id":"cks69zwu7000w6bt60gk6hlgu"},{"post_id":"cks69zwtv00086bt6fx92alor","tag_id":"cks69zwu6000u6bt68hzugi95","_id":"cks69zwu7000x6bt67b45evvd"},{"post_id":"cktd482mk0000rat67f4t8vfb","tag_id":"cktd2gn220001ljt6eyc5gatd","_id":"cktd482mn0001rat6hcrh8qrp"},{"post_id":"ckwdkzu2900012rt60amq7fe6","tag_id":"cks69zwu3000k6bt673kk8dr5","_id":"ckwdkzu2i00032rt6dyvwcxhy"},{"post_id":"ckwdkzu1y00002rt651sj1afi","tag_id":"ckwdkzu2b00022rt64vhpgbe9","_id":"ckwdkzu2j00062rt6aaw4ce5n"},{"post_id":"cl0dsarr600008dt68kf952jl","tag_id":"cks69zwu3000k6bt673kk8dr5","_id":"cl0dsarrc00018dt6fmst1b8m"},{"post_id":"cl16iwgjh0000fht6agg5devn","tag_id":"cl16iwgjo0002fht65ouq7cfr","_id":"cl16iwgjq0004fht6eemg3646"},{"post_id":"cl16iwgjh0000fht6agg5devn","tag_id":"cks69zwtx000a6bt674rtase8","_id":"cl16iwgjr0006fht664ut4ujk"}],"Tag":[{"name":"dva","_id":"cks69zwts00056bt600zqght5"},{"name":"踩坑","_id":"cks69zwtx000a6bt674rtase8"},{"name":"hexo","_id":"cks69zwtz000c6bt67sxybxxr"},{"name":"生活","_id":"cks69zwu3000k6bt673kk8dr5"},{"name":"兼容性","_id":"cks69zwu6000s6bt63w64h6z8"},{"name":"状态机","_id":"cks69zwu6000u6bt68hzugi95"},{"name":"git","_id":"cktd2gn220001ljt6eyc5gatd"},{"name":"npm","_id":"cktd2gn250003ljt63tm4fxvn"},{"name":"k8s","_id":"ckwdkzu2b00022rt64vhpgbe9"},{"name":"docker","_id":"cl16iwgjo0002fht65ouq7cfr"}]}}